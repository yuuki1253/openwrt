config gps
	option	'tty'	'ttyACM0'
  config security security
# Simplest security mode:
#	option password foo
# Trust consensus and CA-based share these options:
#	option certificate_file /etc/hnetd-cert.pem
#	option private_key_file /etc/hnetd-key.pem
# Then to enable trust consensus:
#	option trust_store /etc/hnetd-trust.dat
# Or CA-based authentication:
#	option trust_certificate_file /etc/ca-cert.pem

config pa pa
#	option ip4prefix 10.0.0.0/8
#	option ulaprefix fd12:3456:789A::/48
#	option ulamode off
	option persistent_store /etc/hnet-pa.store

config sd sd
#	option router_name openwrt
#	option domain_name home.

config login
	option username 'root'
	option password '$p$root'
	list read '*'
	list write '*'

package ahcpd

config ahcpd
	# Choose ahcp mode: client (default), server or forwarder
	## option 'mode' 'client'
	# Uncomment the following lines to enable ahcpd on the desired
	# interfaces.
	## list 'interface' 'lan'
	## list 'interface' 'wlan'

	# The following only makes sense in 'server' mode.
	# Tweak to suit your needs.
	## list 'prefix' 'fde6:20f5:c9ac:358::/64'
	## list 'prefix' '192.168.4.128/25'
	## list 'name_server' 'fde6:20f5:c9ac:358::1'
	## list 'name_server' '192.168.4.1'
	## list 'ntp_server' '192.168.4.2'
	## option 'lease_dir' '/var/lib/leases'

	# option 'id_file' '/var/lib/ahcp-unique-id'
	# option 'log_file' '/var/log/ahcpd.log'
	# The configuration file is not necessary since you can configure
	# everything from this file.  But still, you might prefer using it.
	## option 'conf_file' '/etc/ahcp/ahcp.conf'

	# option 'multicast_address' 'ff02::cca6:c0f9:e182:5359'
	# option 'port' '5359'
	# option 'ipv4_only' 'false'
	# option 'ipv6_only' 'false'
	# option 'lease_time' '3666'
	# option 'debug' '1'

config upnpd config
	option enable_natpmp	1
	option enable_upnp	1
	option secure_mode	1
	option log_output	0
	option download 	1024
	option upload   	512
        #by default, looked up dynamically from ubus
	#option external_iface	wan
	option internal_iface	lan
	option port		5000
	option upnp_lease_file	/var/upnp.leases
	
config perm_rule
	option action		allow
	option ext_ports	1024-65535
	option int_addr		0.0.0.0/0	# Does not override secure_mode
	option int_ports	1024-65535
	option comment		"Allow high ports"

config perm_rule
       option action		deny
       option ext_ports		0-65535
       option int_addr		0.0.0.0/0
       option int_ports		0-65535
       option comment		"Default deny"
       config olsrd
	# uncomment the following line to use a custom config file instead:
	#option config_file '/etc/olsrd.conf'

config LoadPlugin
	option library 'olsrd_arprefresh.so.0.1'

config LoadPlugin
	option library 'olsrd_dyn_gw.so.0.5'

config LoadPlugin
	option library 'olsrd_httpinfo.so.0.1'
	option port '1978'
	list Net '0.0.0.0 0.0.0.0'

config LoadPlugin
	option library 'olsrd_nameservice.so.0.3'

config LoadPlugin
	option library 'olsrd_txtinfo.so.0.1'
	option accept '0.0.0.0'

config Interface
	list interface 'wlan'
  config 'alfred' 'alfred'
	option interface 'br-lan'
	option mode 'master'
	option batmanif 'bat0'
	option start_vis '1'
	option run_facters '1'
# REMOVE THIS LINE TO ENABLE ALFRED
	option disabled '1'
  package babeld

# Babeld reads options from the following files (the last one takes precedence
# if an option is defined in several places):
# - the file defined by the option conf_file (default: /etc/babeld.conf),
# - *.conf files in the directory defined by conf_dir (default: /tmp/babel.d/),
# - this UCI configuration file.

# See "man babeld" for all available options ("Global options").
# Important: remember to use '_' instead of '-' in option names.
config general
	# option 'random_id' 'true'
	# option 'debug' '1'
	# option 'local_port' '33123'
	# option 'log_file' '/var/log/babeld.log'
	## Enable ipv6-subtrees by default since OpenWrt should ship with a
	## recent enough kernel for it to work.
	option 'ipv6_subtrees' 'true'
	## This seems somewhat buggy on BB.  If you need only one
	## import-table statement, "option import_table 42" should work.
	# list 'import_table' '42'
	# list 'import_table' '100'
	## Alternative configuration file and directory.
	## See comment at the top of this file for more details.
	# option 'conf_file' '/etc/babeld.conf'
	# option 'conf_dir' '/tmp/babel.d/'

config interface
	## Remove this line to enable babeld on this interface
	option 'ignore' 'true'
	## You can use aliases (like lan, wlan) or real names (like eth0.0).
	## If you use an alias, it must be already defined when babeld starts.
	## Otherwise, the name is taken literally and the interface can be
	## brought up later (useful for tunnels for instance).
	option 'ifname' 'wlan'
	## You can set options, see babeld man page ("Interface configuration")
	# option 'rxcost' '256'
	# option 'hello_interval' '1'

config interface
	option 'ignore' 'true'
	## Physical interface name
	option 'ifname' 'tun-example'
	# option 'max_rtt_penalty' '90'

# A config interface without "option ifname" will set default options
# for all interfaces.  Interface-specific configuration always overrides
# default configuration.
config interface
	# option 'enable_timestamps' 'true'
	# option 'update_interval' '30'


# A filter consists of a type ('in', 'out' or 'redistribute'), an action
# ('allow', 'deny' or 'metric xxx') and a set of selectors ('ip', 'eq',
# etc.).  See babeld man page ("Filtering rules") for more details.
# Here is a sample filter wich redistributes the default route if its
# protocol number is "boot", e.g. when it installed by dhcp.  It is
# disabled by default.
config filter
	option 'ignore'	'true'
	# Type
	option 'type'	'redistribute'
	# Selectors: ip, eq, le, ge, src_ip, src_eq, src_le, src_ge, neigh, id,
	# proto, local, if.
	option 'ip'	'0.0.0.0/0'
	option 'eq'	'0'
	option 'proto'	'3'
	# Action (one of: allow, deny, metric XXX, src-prefix XXX).
	option 'action'	'metric 128'

# Notice that the 'local' selector is a boolean.
config filter
	option 'ignore'	'true'
	option 'type'	'redistribute'
	option 'local'	'true'
	# No action means "allow"
  config olsrd
	# uncomment the following line to use a custom config file instead:
	#option config_file '/etc/olsrd6.conf'

config LoadPlugin
	option library 'olsrd_txtinfo.so.0.1'
	option accept '::'
	option port '2007'

config Interface
	list interface 'wlan'
  config trelay
	option enabled	0
	option dev1	eth0
	option dev2	wlan0
  config mountd mountd
	option	timeout		60
	option	path		/tmp/mounts/
  # Use your own MCProxy config file
config mcproxy 'mcproxy_file'
	option disabled '1'
	option respawn '1'
	option file '/etc/mcproxy.conf'

# Use OpenWrt UCI config
config mcproxy 'mcproxy'
	option disabled '1'
	option respawn '1'
	option protocol 'IGMPv3'

###########################################

# Simple configuration examples

config instance
	option disabled '1'
	option name 'proxy1'
	list upstream 'eth1'
	list downstream 'eth0.2'

config instance
	option disabled '1'
	option name 'proxy2'
	list upstream 'eth0.2'
	list downstream 'eth0.4'
	list downstream 'br-lan'

config instance
	option disabled '1'
	option name 'proxy3'
	list upstream 'eth1.2'
	list upstream 'eth1.4'
	list downstream 'eth0.1'

###########################################

# Advanced configuration example

config instance
	option name 'A'
	list upstream 'ap'
	list upstream 'a1'
	list downstream 'ap'
	list downstream 'a2'

config instance
	option name 'B'
	list upstream 'bp'
	list upstream 'b1'
	list downstream 'bp'
	list downstream 'b2'

config table
	option name 'allways'
	list entries '(*|*)'

config table
	option name 'piA_peering_ifs'
	list entries 'ap(*|*)'

config table
	option name 'piA_upstreams'
	list entries 'a1(*|*)'

config table
	option name 'piB_peering_ifs'
	list entries 'bp(*|*)'

config table
	option name 'piB_upstreams'
	list entries 'b1(*|*)'

config behaviour
	option instance 'A'
	option section 'upstream'
	option interface '*'
	option direction 'in'
	option rulematching 'mutex 10'

config behaviour
	option disabled '1'
	option instance 'A'
	option section 'upstream'
	option interface '*'
	option direction 'out'
	option rulematching 'all'

config behaviour
	option instance 'A'
	option section 'upstream'
	option interface 'ap'
	option direction 'out'
	option table 'allways'

config behaviour
	option disabled '1'
	option instance 'A'
	option section 'upstream'
	option interface 'ap'
	option direction 'in'
	option whitelist '1'
	option table '{(*|*)}'

config behaviour
	option instance 'A'
	option section 'upstream'
	option interface 'a1'
	option direction 'out'
	option table 'piA_peering_ifs'

config behaviour
	option disabled '1'
	option instance 'A'
	option section 'upstream'
	option interface 'a1'
	option direction 'in'
	option whitelist '1'
	option table '{(*|*)}'

config behaviour
	option instance 'A'
	option section 'downstream'
	option interface 'ap'
	option direction 'in'
	option table 'allways'

config behaviour
	option instance 'A'
	option section 'downstream'
	option interface 'ap'
	option direction 'out'
	option table 'piA_upstreams'

config behaviour
	option disabled '1'
	option instance 'A'
	option section 'downstream'
	option interface 'a2'
	option direction 'in'
	option whitelist '1'
	option table '{(*|*)}'

config behaviour
	option disabled '1'
	option instance 'A'
	option section 'downstream'
	option interface 'a2'
	option direction 'out'
	option whitelist '1'
	option table '{(*|*)}'

config behaviour
	option instance 'B'
	option section 'upstream'
	option interface '*'
	option direction 'in'
	option rulematching 'mutex 10'

config behaviour
	option disabled '1'
	option instance 'B'
	option section 'upstream'
	option interface '*'
	option direction 'out'
	option rulematching 'all'

config behaviour
	option instance 'B'
	option section 'upstream'
	option interface 'bp'
	option direction 'out'
	option table 'allways'

config behaviour
	option disabled '1'
	option instance 'B'
	option section 'upstream'
	option interface 'bp'
	option direction 'in'
	option whitelist '1'
	option table '{(*|*)}'

config behaviour
	option instance 'B'
	option section 'upstream'
	option interface 'b1'
	option direction 'out'
	option table 'piB_peering_ifs'

config behaviour
	option disabled '1'
	option instance 'B'
	option section 'upstream'
	option interface 'b1'
	option direction 'in'
	option whitelist '1'
	option table '{(*|*)}'

config behaviour
	option instance 'B'
	option section 'downstream'
	option interface 'bp'
	option direction 'in'
	option table 'allways'

config behaviour
	option instance 'B'
	option section 'downstream'
	option interface 'bp'
	option direction 'out'
	option table 'piB_upstreams'

config behaviour
	option disabled '1'
	option instance 'B'
	option section 'downstream'
	option interface 'b2'
	option direction 'in'
	option whitelist '1'
	option table '{(*|*)}'

config behaviour
	option disabled '1'
	option instance 'B'
	option section 'downstream'
	option interface 'b2'
	option direction 'out'
	option whitelist '1'
	option table '{(*|*)}'
  config instance
  # Set to 1 to enable nodogsplash
  option enabled 0

  # Use plain configuration file as well
  #option config '/etc/nodogsplash/nodogsplash.conf'
  option network 'lan'
  option gatewayname 'OpenWrt Nodogsplash'
  option maxclients '250'
  option idletimeout '1200'

  # Your router may have several interfaces, and you
  # probably want to keep them private from the network/gatewayinterface.
  # If so, you should block the entire subnets on those interfaces, e.g.:
  list authenticated_users 'block to 192.168.0.0/16'
  list authenticated_users 'block to 10.0.0.0/8'

  # Typical ports you will probably want to open up.
  list authenticated_users 'allow tcp port 22'
  list authenticated_users 'allow tcp port 53'
  list authenticated_users 'allow udp port 53'
  list authenticated_users 'allow tcp port 80'
  list authenticated_users 'allow tcp port 443'

  # For preauthenticated users to resolve IP addresses in their
  # initial request not using the router itself as a DNS server,
  list preauthenticated_users 'allow tcp port 53'
  list preauthenticated_users 'allow udp port 53'

  # Allow ports for SSH/Telnet/DNS/DHCP/HTTP/HTTPS
  list users_to_router 'allow tcp port 22'
  list users_to_router 'allow tcp port 23'
  list users_to_router 'allow tcp port 53'
  list users_to_router 'allow udp port 53'
  list users_to_router 'allow udp port 67'
  list users_to_router 'allow tcp port 80'
  list users_to_router 'allow tcp port 443'

  # See https://github.com/nodogsplash for a full list of available options.
  config main main
	option host '::'
	option port '53'

#config interface
#	option interface lan
#	option domain lan.home.
config 'mmc_over_gpio'
	option 'name' 'default'
	option 'enabled' '0'
	option 'DI_pin' '@GPIO_DI_PIN@'
	option 'DO_pin' '@GPIO_DO_PIN@'
	option 'CLK_pin' '@GPIO_CLK_PIN@'
	option 'CS_pin' '@GPIO_CS_PIN@'
	option 'mode' '0'
  #
# lxc uci configuration
#

config lxc 'lxc'
	option url 'virtualwrt.org/containers/'
  #
# Please read http://wiki.openwrt.org/doc/uci/ddns
#
config ddns "global"
	option ddns_dateformat "%F %R"
#	option ddns_rundir "/var/run/ddns"
#	option ddns_logdir "/var/log/ddns"
	option ddns_loglines "250"
	option upd_privateip "0"


config service "myddns_ipv4"
	option service_name	"dyndns.org"
	option lookup_host	"yourhost.example.com"
	option domain		"yourhost.example.com"
	option username		"your_username"
	option password		"your_password"
	option interface	"wan"
	option ip_source	"network"
	option ip_network	"wan"

config service "myddns_ipv6"
	option update_url	"http://[USERNAME]:[PASSWORD]@your.provider.net/nic/update?hostname=[DOMAIN]&myip=[IP]"
	option lookup_host	"yourhost.example.com"
	option domain		"yourhost.example.com"
	option username		"your_username"
	option password		"your_password"
	option use_ipv6		"1"
	option interface	"wan6"
	option ip_source	"network"
	option ip_network	"wan6"
config daemon args
        # daemon is started as 'knxd $options $url'
        # use 'knxd --help' to get all possible options'
        #
        # typical example for options for tunnel mode
        option options '-D -T -S -d/tmp/knxd.log -i -p/var/run/knxd.pid'
        # add '-t1023' or '--trace=1023' for full log trace

        # example with tpuarts interface
        # option url 'tpuarts:/dev/ttyAMA0'
        # example with IP interface in tunnel mode
        option url 'ipt:192.168.1.20'
        package 'sslh'

config 'sslh' 'default'
	# disable or enable
	option 'enable' '1'
	# listen defaults to '0.0.0.0:443' (all interfaces)
	# multiple -p arguments may be supplied using a uci list
	# -p <listenaddr>:<listenport>
	option 'listen' ''
	# ssh defaults to 'localhost:22'
	# --ssh <sshhost>:<sshport>
	option 'ssh' ''
	# ssl defaults to 'localhost:443'
	# --ssl <sslhost>:<sslport>
	option 'ssl' ''
	# openvpn defaults to 'localhost:1194'
	# --openvpn <openvpnhost>:<openvpnport>
	option 'openvpn' ''
	# tinc defaults to 'localhost:655'
	# --tinc <tinchost>:<tincport>
	option 'tinc' ''
	# xmpp defaults to 'localhost:5222'
	# --xmpp <xmpphost>:<xmppport>
	option 'xmpp' ''
	# timeout (for ssh, then ssl is assumed) defaults to 2
	# -t
	option 'timeout' ''
	# verbose defaults to off
	# -v
	option 'verbose' '0'
  config tinc-net NETNAME
	option enabled 0

	## Daemon Configuration	(cmd arguments)
	#option generate_keys 0
	#option key_size 2048
	#option logfile /tmp/log/tinc.NETNAME.log
	#option debug 3

	## Server Configuration (tinc.conf)
	#option AddressFamily any
	#option BindToAddress 127.0.0.1
	#option BindToInterface lo

	#list ConnectTo peer1

	#option DirectOnly 0
	#option Forwarding internal
	#option GraphDumpFile /tmp/log/tinc.NETNAME.dot
	#option Hostnames 0
	#option IffOneQueue 0
	#option Interface NETNAME
	#option KeyExpire 3600
	#option MACExpire 600
	#option MaxTimeout 900
	#option Mode router

	option Name NODENAME

	#option PingInterval 60
	#option PingTimeout 5
	#option PriorityInheritance 0
	#option PrivateKeyFile /etc/tinc/NETNAME/rsa_key.priv
	#option ProcessPriority normal
	#option ReplayWindow 16
	#option StrictSubnets 0
	#option TunnelServer 0
	#option UDPRcvBuf x
	#option UDPSndBuf x

config tinc-host NODENAME
	option enabled 0

	option net NETNAME

	#list Address example.com
	#option Cipher blowfish
	#option ClampMSS yes
	#option Compression 0
	#option Digest sha1
	#option IndirectData 0
	#option MACLength 4
	#option PMTU 1514
	#option PMTUDiscovery yes
	#option Port 655
	#option Subnet 192.168.1.0/24
  config mdns
	option jail 1
	list network lan
  config bcp38
	option enabled 0
	option interface 'eth1'
	option detect_upstream 1
	list match '127.0.0.0/8'
	list match '0.0.0.0/8'       # RFC 1700
	list match '240.0.0.0/4'     # RFC 5745
	list match '192.0.2.0/24'    # RFC 5737
	list match '198.51.100.0/24' # RFC 5737
	list match '203.0.113.0/24'  # RFC 5737
	list match '192.168.0.0/16'  # RFC 1918
	list match '10.0.0.0/8'      # RFC 1918
	list match '172.16.0.0/12'   # RFC 1918
	list match '169.254.0.0/16'  # RFC 3927

# 	list nomatch '172.26.0.0/21' # Example of something not to match
#	There is a dhcp trigger to do this for the netmask of a 
#	double natted connection needed

#	I will argue that this level of indirection doesn't scale
# 	very well - see how to block china as an example
#	http://www.okean.com/china.txt
config service 'pptpd'
	option 'enabled' '0'
	option 'localip' '192.168.0.1'
	option 'remoteip' '192.168.0.20-30'

config 'login'
	option 'username' 'youruser'
	option 'password' 'yourpass'
  config snort 'snort'
	option config_file '/etc/snort/snort.conf'
	option interface 'lo'
  # forward port 8000 on IPv6 to IPv4 host port 80
# change enable to '1' to use this example
config socat 'http'
	option enable '0'
	option SocatOptions '-d -d TCP6-LISTEN:8000,fork TCP4:192.168.1.20:80'
  config squid 'squid'
	option config_file '/etc/squid/squid.conf'
	option http_port '3128'
	option coredump_dir '/tmp/squid'
	option visible_hostname 'OpenWrt'
	option mime_table '/etc/squid/mime.conf'
	#option http_port_options 'intercept'
	#option ssldb '/tmp/squid/ssldb'
	#option ssldb_options '-M 4MB'
  config lldpd config
	option enable_cdp 1
	option enable_fdp 1
	option enable_sonmp 1
	option enable_edp 1
	
	option lldp_class 4
	option lldp_location "2:FR:6:Commercial Rd:3:Roseville:19:4"

	# if empty, the distribution description is sent
	#option lldp_description "OpenWrt System"

	# interfaces to listen on
	list interface "loopback"
	list interface "lan"
  config samba
	option 'name'			'OpenWrt'
	option 'workgroup'		'WORKGROUP'
	option 'description'		'OpenWrt'
	option 'homes'			'1'
#
# Sample Coova-Chilli configuration file
#

config chilli
    # disable to running chilli. remove this option before running.
    option disabled 1

    # name of TUN device name. required.
    option tundev 'tun0'

    # Include this flag if process is to run in the foreground
    #option fg

    # Include this flag to include debug information.
    #option debug 9

    # Re-read configuration file at this interval. Will also cause new domain
    # name lookups to be performed. Value is given in seconds.
    #option interval 3600

    # File to store information about the process id of the program.
    # The program must have write access to this file/directory.
    #option pidfile /var/run/chilli.pid

    # Directory to use for nonvolatile storage.
    # The program must have write access to this directory.
    # this option is currently ignored
    #option statedir ./


    # TUN parameters

    # IP network address of external packet data network
    # Used to allocate dynamic IP addresses and set up routing.
    # Normally you do not need to uncomment this option.
    #option net 192.168.182.0/24

    # Dynamic IP address pool
    # Used to allocate dynamic IP addresses to clients.
    # If not set it defaults to the net tag.
    # Do not uncomment this option unless you are an experienced user!
    #option dynip 192.168.182.0/24

    # Static IP address pool
    # Used to allocate static IP addresses to clients.
    # Do not uncomment this option unless you are an experienced user!
    #option statip 192.168.182.0/24


    # Primary DNS server.
    # Will be suggested to the client.
    # If omitted the system default will be used.
    # Normally you do not need to uncomment this option.
    #option dns1 172.16.0.5

    # Secondary DNS server.
    # Will be suggested to the client.
    # If omitted the system default will be used.
    # Normally you do not need to uncomment this option.
    #option dns2 172.16.0.6

    # Domain name
    # Will be suggested to the client.
    # Normally you do not need to uncomment this option.
    #option domain key.chillispot.org

    # Script executed after network interface has been brought up.
    # Executed with the following parameters: <devicename> <ip address>
    # <mask>
    # Normally you do not need to uncomment this option.
    #option ipup /etc/chilli.ipup

    # Script executed after network interface has been taken down.
    # Executed with the following parameters: <devicename> <ip address>
    # <mask>
    # Normally you do not need to uncomment this option.
    #option ipdown /etc/chilli.ipdown


    # Radius parameters

    # IP address to listen to
    # Normally you do not need to uncomment this option.
    #option radiuslisten 127.0.0.1

    # IP address of radius server 1
    # For most installations you need to modify this option.
    radiusserver1 rad01.chillispot.org

    # IP address of radius server 2
    # If you have only one radius server you should set radiusserver2 to the
    # same value as radiusserver1.
    # For most installations you need to modify this option.
    radiusserver2 rad02.chillispot.org

    # Radius authentication port
    # The UDP port number to use for radius authentication requests.
    # The same port number is used for both radiusserver1 and radiusserver2.
    # Normally you do not need to uncomment this option.
    #option radiusauthport 1812

    # Radius accounting port
    # The UDP port number to use for radius accounting requests.
    # The same port number is used for both radiusserver1 and radiusserver2.
    # Normally you do not need to uncomment this option.
    #option radiusacctport 1813

    # Radius shared secret for both servers
    # For all installations you should modify this option.
    #option radiussecret testing123

    # Radius NAS-Identifier
    # Normally you do not need to uncomment this option.
    #option radiusnasid nas01

    # WISPr Location ID. Should be in the format: isocc=<ISO_Country_Code>,
    # cc=<E.164_Country_Code>,ac=<E.164_Area_Code>,network=<ssid/ZONE>
    # Normally you do not need to uncomment this option.
    #option radiuslocationid isocc=us,cc=1,ac=408,network=ACMEWISP_NewarkAirport

    # WISPr Location Name. Should be in the format:
    # <HOTSPOT_OPERATOR_NAME>,<LOCATION>
    # Normally you do not need to uncomment this option.
    #option radiuslocationname ACMEWISP,Gate_14_Terminal_C_of_Newark_Airport


    # Radius proxy parameters

    # IP address to listen to
    # Normally you do not need to uncomment this option.
    #option proxylisten 10.0.0.1

    # UDP port to listen to.
    # If not specified a port will be selected by the system
    # Normally you do not need to uncomment this option.
    #option proxyport 1645

    # Client(s) from which we accept radius requests
    # Normally you do not need to uncomment this option.
    #option proxyclient 10.0.0.1/24

    # Radius proxy shared secret for all clients
    # If not specified defaults to radiussecret
    # Normally you do not need to uncomment this option.
    #option proxysecret testing123


    # DHCP Parameters

    # Ethernet interface to listen to.
    # This is the network interface which is connected to the access points.
    # In a typical configuration this option should be set to eth1.
    dhcpif eth1

    # Use specified MAC address.
    # An address in the range  00:00:5E:00:02:00 - 00:00:5E:FF:FF:FF falls
    # within the IANA range of addresses and is not allocated for other
    # purposes.
    # Normally you do not need to uncomment this option.
    #option dhcpmac 00:00:5E:00:02:00

    # Time before DHCP lease expires
    # Normally you do not need to uncomment this option.
    #option lease 600


    # Universal access method (UAM) parameters

    # URL of web server handling authentication.
    uamserver https://radius.chillispot.org/hotspotlogin

    # URL of welcome homepage.
    # Unauthenticated users will be redirected to this URL. If not specified
    # users will be redirected to the uamserver instead.
    # Normally you do not need to uncomment this option.
    #option uamhomepage http://192.168.182.1/welcome.html

    # Shared between chilli and authentication web server
    #option uamsecret ht2eb8ej6s4et3rg1ulp

    # IP address to listen to for authentication requests
    # Do not uncomment this option unless you are an experienced user!
    #option uamlisten 192.168.182.1

    # TCP port to listen to for authentication requests
    # Do not uncomment this option unless you are an experienced user!
    #option uamport 3990

    # Comma separated list of domain names, IP addresses or network segments
    # the client can access without first authenticating.
    # It is possible to specify this option multiple times.
    # Normally you do not need to uncomment this option.
    #option uamallowed www.chillispot.org,10.11.12.0/24

    # Comma separated list of domain names
    # the client can access without first authenticating.
    # It is possible to specify this option multiple times.
    # Normally you do not need to uncomment this option.
    #option uamdomain .chillispot.org,.coova.org

    # If this flag is given unauthenticated users are allowed to use
    # any DNS server.
    # Normally you do not need to uncomment this option.
    #option uamanydns


    # MAC authentication

    # If this flag is given users will be authenticated only on their MAC
    # address.
    # Normally you do not need to uncomment this option.
    #option macauth

    # List of MAC addresses.
    # The MAC addresses specified in this list will be authenticated only on
    # their MAC address.
    # this option is ignored if the macauth tag is given.
    # It is possible to specify this option multiple times.
    # Normally you do not need to uncomment this option.
    #option macallowed 00-0A-5E-AC-BE-51,00-30-1B-3C-32-E9

    # Password to use for MAC authentication.
    # Normally you do not need to uncomment this option.
    #option macpasswd password

    # Suffix to add to MAC address in order to form the username.
    # Normally you do not need to uncomment this option.
    #option macsuffix suffix
config daemon args
        # daemon is started as 'linknx --config=$conf $options'
        # use 'linknx --help' to get all possible options'
        #
        # typical example
        option conf '/etc/linknx.xml'
        option options '-w --daemon=/tmp/linknx/linknx.log --pid-file=/var/run/linknx.pid'
config p910nd
	option device        /dev/usb/lp0
	option port          0
	option bidirectional 1
	option enabled       0
  # polipo daemon configuration
config 'polipo' 'daemon'
	# daemonise polipo (fork in background)
	option 'daemonise' '1'
	# where polipo will store its process pid
	option 'pidFile' '/var/run/polipo.pid'

config 'polipo' 'general'
	option 'enabled' '1'
	# adress on which polipo will listen, 0.0.0.0 means all addresses
	option 'proxyAddress' '0.0.0.0'
	# port on which polipo will listen, default is 8123
	#option 'proxyPort' '8123'
	# list of allowed clients to connect
	list 'allowedClients' '192.168.1.0/24'
	#list 'allowedClients' '127.0.0.1'
	#list 'allowedClients' '192.168.2.1'
	# how much RAM memory should Polipo use (in bytes).
	option 'chunkHighMark' '1048576'
	# enable disk cache index and serverlist of integrated polipo web interface
	#option 'disableIndexing' '0'
	#option 'disableServersList' '0'
	# disable loging to syslog 
	option 'logSyslog' '0'
	# set log file location (disabled when not set)
	#option 'logFile' '/mnt/usbdrive/polipo/log'

config 'polipo' 'cache'
	# disk cache location, you should always use external storage device
	# (disabled when not set)
	#option 'diskCacheRoot' '/mnt/usbdrive-p2/polipo/cache'
	# disk cache cleanup settings
	#option 'diskCacheUnlinkTime' '20d'
	#option 'diskCacheTruncateTime' '5d'
	#option 'diskCacheTruncateSize' '3145728'
	# set to 1 if proxy is used by multiple users
	#option 'cacheIsShared' '1'

config 'polipo' 'pmm'
	# poor man's multiplexing semgnet size to fetch
	#option 'pmmSize' '8192'
config vnstat
	list interface		br-lan
#	list interface		eth0.1
#	option remote		http://example.org/vnstat/
#	option symlink		/www/vnstat
# Server configuration
config uhttpd main

	# HTTP listen addresses, multiple allowed
	list listen_http	0.0.0.0:80
	list listen_http	[::]:80

	# HTTPS listen addresses, multiple allowed
	list listen_https	0.0.0.0:443
	list listen_https	[::]:443

	# Redirect HTTP requests to HTTPS if possible
	option redirect_https	1

	# Server document root
	option home		/www

	# Reject requests from RFC1918 IP addresses
	# directed to the servers public IP(s).
	# This is a DNS rebinding countermeasure.
	option rfc1918_filter 1

	# Maximum number of concurrent requests.
	# If this number is exceeded, further requests are
	# queued until the number of running requests drops
	# below the limit again.
	option max_requests 3

	# Maximum number of concurrent connections.
	# If this number is exceeded, further TCP connection
	# attempts are queued until the number of active
	# connections drops below the limit again.
	option max_connections 100

	# Certificate and private key for HTTPS.
	# If no listen_https addresses are given,
	# the key options are ignored.
	option cert		/etc/uhttpd.crt
	option key		/etc/uhttpd.key

	# CGI url prefix, will be searched in docroot.
	# Default is /cgi-bin
	option cgi_prefix	/cgi-bin

	# List of extension->interpreter mappings.
	# Files with an associated interpreter can
	# be called outside of the CGI prefix and do
	# not need to be executable.
#	list interpreter	".php=/usr/bin/php-cgi"
#	list interpreter	".cgi=/usr/bin/perl"

	# Lua url prefix and handler script.
	# Lua support is disabled if no prefix given.
#	option lua_prefix	/luci
#	option lua_handler	/usr/lib/lua/luci/sgi/uhttpd.lua

	# Specify the ubus-rpc prefix and socket path.
#	option ubus_prefix	/ubus
#	option ubus_socket	/var/run/ubus.sock

	# CGI/Lua timeout, if the called script does not
	# write data within the given amount of seconds,
	# the server will terminate the request with
	# 504 Gateway Timeout response.
	option script_timeout	60

	# Network timeout, if the current connection is
	# blocked for the specified amount of seconds,
	# the server will terminate the associated
	# request process.
	option network_timeout	30

	# HTTP Keep-Alive, specifies the timeout for persistent
	# HTTP/1.1 connections. Setting this to 0 will disable
	# persistent HTTP connections.
	option http_keepalive	20

	# TCP Keep-Alive, send periodic keep-alive probes
	# over established connections to detect dead peers.
	# The value is given in seconds to specify the
	# interval between subsequent probes.
	# Setting this to 0 will disable TCP keep-alive.
	option tcp_keepalive	1

	# Basic auth realm, defaults to local hostname
#	option realm	OpenWrt

	# Configuration file in busybox httpd format
#	option config	/etc/httpd.conf

	# Do not follow symlinks that point outside of the
	# home directory.
#	option no_symlinks	0

	# Do not produce directory listings but send 403
	# instead if a client requests an url pointing to
	# a directory without any index file.
#	option no_dirlists	0

	# Do not authenticate any ubus-rpc requests against
	# the ubus session/access procedure.
	# This is dangerous and should be always left off
	# except for development and debug purposes!
#	option no_ubusauth	0


# Certificate defaults for px5g key generator
config cert px5g

	# Validity time
	option days		730

	# RSA key size
	option bits		1024

	# Location
	option country		ZZ
	option state		Somewhere
	option location		Uknown

	# Common name
	option commonname	OpenWrt
  config iodined
        option address     ''
        option password    ''
        option tunnelip    '10.0.0.1'
        option tld     	   ''
        # this file support all available configuration options of Privoxy web-proxy
# the scripts move all options to the final privoxy readable configuration file
#
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!! privoxy uses "-" in option names but uci only support "_"         !!!
# !!! privoxy "listen-address" must be uci "listen_address"             !!!
# !!!                                                                   !!!
# !!! if you add entries please use                                     !!!
# !!! option for options with one parameter (option confdir)            !!!
# !!! list   for options with multiple parameters (list listen_address) !!!
# !!!                                                                   !!!
# !!! special handling for debug option                                 !!!
# !!! privoxy option "debug 1024" must be uci option debug_1024 '1'     !!!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
config	privoxy	'privoxy'
	option	confdir		'/etc/privoxy'
	option	logdir		'/var/log'
	option	logfile		'privoxy.log'
	list	filterfile	'default.filter'
#	list	filterfile	'user.filter'
	list	actionsfile	'match-all.action'
	list	actionsfile	'default.action'
#	list	actionsfile	'user.action'
#	list	listen_address	'127.0.0.1:8118'
	list	listen_address	'192.168.1.1:8118'
	option	toggle		'1'
	option	enable_remote_toggle	'1'
	option	enable_remote_http_toggle	'0'
	option	enable_edit_actions	'1'
	option	enforce_blocks		'0'
	option	buffer_limit		'4096'
	option	forwarded_connect_retries	'0'
	option	accept_intercepted_requests	'0'
	option	allow_cgi_request_crunching	'0'
	option	split_large_forms	'0'
	option	keep_alive_timeout	'300'
	option	socket_timeout		'300'
	list	permit_access		'192.168.1.0/24'
	option	debug_1		'0'
	option	debug_512	'1'
	option	debug_1024	'0'
	option	debug_4096	'1'
	option	debug_8192	'1'
  config sslocal
       option server_addr ''
       option server_port ''
       option local_addr ''
       option local_port ''
       option password ''
       option method ''
       config "client1"
  option disabled 0
#  option username 'nobody'
#  option groupname 'nogroup'
#  option chroot "/var/run/uanytun"

#  option interface '<ip-address>'
#  option port '4444'
#  option sender_id '1'

  option cipher 'aes-ctr'
#  option cipher 'null'
#  option cipher 'aes-ctr-128'
#  option cipher 'aes-ctr-192'
#  option cipher 'aes-ctr-256'
  option auth_algo 'sha1'
#  option auth_algo 'null'
#  option auth_tag_length 10

#  option dev 'anytun0'
  option type 'tun'
  option ifconfig '192.168.123.1/24'
#  option post-up-script '/etc/uanytun/client1-post-up.sh'

  option remote_host 'example.com'
  option remote_port '4444'

  option window_size 0
  option mux 1

  option role 'client'
#  option kd_prf 'null'
#  option kd_prf 'aes-ctr'
#  option kd_prf 'aes-ctr-128'
#  option kd_prf 'aes-ctr-192'
#  option kd_prf 'aes-ctr-256'
#  option ld_kdr '0'
#  option key '0123456789ABCDEF0123456789ABCDEF'
#  option salt '0123456789ABCD0123456789ABCD'
  option passphrase 'Creating_VPN_Tunnels_With_Anytun_Is_Easy'

  option log 'syslog:3,anytun-client1,daemon'


config "client2"
  option disabled 1

  option cipher 'aes-ctr'
  option auth_algo 'sha1'
  option type 'tun'
  option ifconfig '192.168.123.2/24'

  option remote_host 'example.com'
  option remote_port '4444'

  option window_size 0
  option mux 2
  option role 'client'
  option passphrase 'Creating_VPN_Tunnels_With_Anytun_Is_Easy'

  option log 'syslog:3,anytun-client2,daemon'


config "client3"
  option disabled 1

  option cipher 'aes-ctr'
  option auth_algo 'sha1'
  option type 'tun'
  option ifconfig '192.168.123.3/24'

  option remote_host 'example.com'
  option remote_port '4444'

  option window_size 0
  option mux 3
  option role 'client'
  option passphrase 'Creating_VPN_Tunnels_With_Anytun_Is_Easy'

  option log 'syslog:3,anytun-client3,daemon'


config "p2p-a"
  option disabled 1

  option cipher 'aes-ctr'
  option auth_algo 'sha1'
  option type 'tun'
  option ifconfig '192.168.223.1/24'

  option remote_host 'p2p-b.example.com'
  option remote_port '4444'

  option window_size 0
  option role 'alice'
  option passphrase 'Creating_P2P_VPN_Tunnels_With_Anytun_Is_Easy'

  option log 'syslog:3,anytun-p2p-a,daemon'


config "p2p-b"
  option disabled 1

  option cipher 'aes-ctr'
  option auth_algo 'sha1'
  option type 'tun'
  option ifconfig '192.168.223.2/24'

  option remote_host 'p2p-a.example.com'
  option remote_port '4444'

  option window_size 0
  option role 'bob'
  option passphrase 'Creating_P2P_VPN_Tunnels_With_Anytun_Is_Easy'

  option log 'syslog:3,anytun-p2p-b,daemon'
  config 'wshaper' 'settings'
	option 'network' 'wan'
	option 'downlink' '2000'
	option 'uplink' '240'
  config 'hd-idle'
	option 'disk' 'sda'
	option 'enabled' '0'
	option 'idle_time_unit' 'minutes'
	option 'idle_time_interval' '10'
  config siproxd general
	option if_inbound	lan
	option if_outbound	wan
  package openvpn

#################################################
# Sample to include a custom config file.       #
#################################################

config openvpn custom_config

	# Set to 1 to enable this instance:
	option enabled 0

	# Include OpenVPN configuration
	option config /etc/openvpn/my-vpn.conf


#################################################
# Sample OpenVPN 2.0 uci config for             #
# multi-client server.                          #
#################################################

config openvpn sample_server

	# Set to 1 to enable this instance:
	option enabled 0

	# Which local IP address should OpenVPN
	# listen on? (optional)
#	option local 0.0.0.0

	# Which TCP/UDP port should OpenVPN listen on?
	# If you want to run multiple OpenVPN instances
	# on the same machine, use a different port
	# number for each one.  You will need to
	# open up this port on your firewall.
	option port 1194

	# TCP or UDP server?
#	option proto tcp
	option proto udp

	# "dev tun" will create a routed IP tunnel,
	# "dev tap" will create an ethernet tunnel.
	# Use "dev tap0" if you are ethernet bridging
	# and have precreated a tap0 virtual interface
	# and bridged it with your ethernet interface.
	# If you want to control access policies
	# over the VPN, you must create firewall
	# rules for the the TUN/TAP interface.
	# On non-Windows systems, you can give
	# an explicit unit number, such as tun0.
	# On Windows, use "dev-node" for this.
	# On most systems, the VPN will not function
	# unless you partially or fully disable
	# the firewall for the TUN/TAP interface.
#	option dev tap
	option dev tun

	# SSL/TLS root certificate (ca), certificate
	# (cert), and private key (key).  Each client
	# and the server must have their own cert and
	# key file.  The server and all clients will
	# use the same ca file.
	#
	# See the "easy-rsa" directory for a series
	# of scripts for generating RSA certificates
	# and private keys.  Remember to use
	# a unique Common Name for the server
	# and each of the client certificates.
	#
	# Any X509 key management system can be used.
	# OpenVPN can also use a PKCS #12 formatted key file
	# (see "pkcs12" directive in man page).
	option ca /etc/openvpn/ca.crt
	option cert /etc/openvpn/server.crt
	# This file should be kept secret:
	option key /etc/openvpn/server.key

	# Diffie hellman parameters.
	# Generate your own with:
	#   openssl dhparam -out dh1024.pem 1024
	# Substitute 2048 for 1024 if you are using
	# 2048 bit keys.
	option dh /etc/openvpn/dh1024.pem

	# Configure server mode and supply a VPN subnet
	# for OpenVPN to draw client addresses from.
	# The server will take 10.8.0.1 for itself,
	# the rest will be made available to clients.
	# Each client will be able to reach the server
	# on 10.8.0.1. Comment this line out if you are
	# ethernet bridging. See the man page for more info.
	option server "10.8.0.0 255.255.255.0"

	# Maintain a record of client <-> virtual IP address
	# associations in this file.  If OpenVPN goes down or
	# is restarted, reconnecting clients can be assigned
	# the same virtual IP address from the pool that was
	# previously assigned.
	option ifconfig_pool_persist /tmp/ipp.txt

	# Configure server mode for ethernet bridging.
	# You must first use your OS's bridging capability
	# to bridge the TAP interface with the ethernet
	# NIC interface.  Then you must manually set the
	# IP/netmask on the bridge interface, here we
	# assume 10.8.0.4/255.255.255.0.  Finally we
	# must set aside an IP range in this subnet
	# (start=10.8.0.50 end=10.8.0.100) to allocate
	# to connecting clients.  Leave this line commented
	# out unless you are ethernet bridging.
#	option server_bridge "10.8.0.4 255.255.255.0 10.8.0.50 10.8.0.100"

	# Push routes to the client to allow it
	# to reach other private subnets behind
	# the server.  Remember that these
	# private subnets will also need
	# to know to route the OpenVPN client
	# address pool (10.8.0.0/255.255.255.0)
	# back to the OpenVPN server.
#	list push "route 192.168.10.0 255.255.255.0"
#	list push "route 192.168.20.0 255.255.255.0"

	# To assign specific IP addresses to specific
	# clients or if a connecting client has a private
	# subnet behind it that should also have VPN access,
	# use the subdirectory "ccd" for client-specific
	# configuration files (see man page for more info).

	# EXAMPLE: Suppose the client
	# having the certificate common name "Thelonious"
	# also has a small subnet behind his connecting
	# machine, such as 192.168.40.128/255.255.255.248.
	# First, uncomment out these lines:
#	option client_config_dir /etc/openvpn/ccd
#	list route "192.168.40.128 255.255.255.248"
	# Then create a file ccd/Thelonious with this line:
	#   iroute 192.168.40.128 255.255.255.248
	# This will allow Thelonious' private subnet to
	# access the VPN.  This example will only work
	# if you are routing, not bridging, i.e. you are
	# using "dev tun" and "server" directives.

	# EXAMPLE: Suppose you want to give
	# Thelonious a fixed VPN IP address of 10.9.0.1.
	# First uncomment out these lines:
#	option client_config_dir /etc/openvpn/ccd
#	list route "10.9.0.0 255.255.255.252"
#	list route "192.168.100.0 255.255.255.0"
	# Then add this line to ccd/Thelonious:
	#   ifconfig-push "10.9.0.1 10.9.0.2"

	# Suppose that you want to enable different
	# firewall access policies for different groups
	# of clients.  There are two methods:
	# (1) Run multiple OpenVPN daemons, one for each
	#     group, and firewall the TUN/TAP interface
	#     for each group/daemon appropriately.
	# (2) (Advanced) Create a script to dynamically
	#     modify the firewall in response to access
	#     from different clients.  See man
	#     page for more info on learn-address script.
#	option learn_address /etc/openvpn/script

	# If enabled, this directive will configure
	# all clients to redirect their default
	# network gateway through the VPN, causing
	# all IP traffic such as web browsing and
	# and DNS lookups to go through the VPN
	# (The OpenVPN server machine may need to NAT
	# the TUN/TAP interface to the internet in
	# order for this to work properly).
	# CAVEAT: May break client's network config if
	# client's local DHCP server packets get routed
	# through the tunnel.  Solution: make sure
	# client's local DHCP server is reachable via
	# a more specific route than the default route
	# of 0.0.0.0/0.0.0.0.
#	list push "redirect-gateway"

	# Certain Windows-specific network settings
	# can be pushed to clients, such as DNS
	# or WINS server addresses.  CAVEAT:
	# http://openvpn.net/faq.html#dhcpcaveats
#	list push "dhcp-option DNS 10.8.0.1"
#	list push "dhcp-option WINS 10.8.0.1"

	# Uncomment this directive to allow different
	# clients to be able to "see" each other.
	# By default, clients will only see the server.
	# To force clients to only see the server, you
	# will also need to appropriately firewall the
	# server's TUN/TAP interface.
#	option client_to_client 1

	# Uncomment this directive if multiple clients
	# might connect with the same certificate/key
	# files or common names.  This is recommended
	# only for testing purposes.  For production use,
	# each client should have its own certificate/key
	# pair.
	#
	# IF YOU HAVE NOT GENERATED INDIVIDUAL
	# CERTIFICATE/KEY PAIRS FOR EACH CLIENT,
	# EACH HAVING ITS OWN UNIQUE "COMMON NAME",
	# UNCOMMENT THIS LINE OUT.
#	option duplicate_cn 1

	# The keepalive directive causes ping-like
	# messages to be sent back and forth over
	# the link so that each side knows when
	# the other side has gone down.
	# Ping every 10 seconds, assume that remote
	# peer is down if no ping received during
	# a 120 second time period.
	option keepalive "10 120"

	# For extra security beyond that provided
	# by SSL/TLS, create an "HMAC firewall"
	# to help block DoS attacks and UDP port flooding.
	#
	# Generate with:
	#   openvpn --genkey --secret ta.key
	#
	# The server and each client must have
	# a copy of this key.
	# The second parameter should be '0'
	# on the server and '1' on the clients.
	# This file is secret:
#	option tls_auth "/etc/openvpn/ta.key 0"

	# Select a cryptographic cipher.
	# This config item must be copied to
	# the client config file as well.
	# Blowfish (default):
#	option cipher BF-CBC
	# AES:
#	option cipher AES-128-CBC
	# Triple-DES:
#	option cipher DES-EDE3-CBC

	# Enable compression on the VPN link.
	# If you enable it here, you must also
	# enable it in the client config file.
	option comp_lzo yes

	# The maximum number of concurrently connected
	# clients we want to allow.
#	option max_clients 100

	# The persist options will try to avoid
	# accessing certain resources on restart
	# that may no longer be accessible because
	# of the privilege downgrade.
	option persist_key 1
	option persist_tun 1
	option user nobody

	# Output a short status file showing
	# current connections, truncated
	# and rewritten every minute.
	option status /tmp/openvpn-status.log

	# By default, log messages will go to the syslog (or
	# on Windows, if running as a service, they will go to
	# the "\Program Files\OpenVPN\log" directory).
	# Use log or log-append to override this default.
	# "log" will truncate the log file on OpenVPN startup,
	# while "log-append" will append to it.  Use one
	# or the other (but not both).
#	option log         /tmp/openvpn.log
#	option log_append  /tmp/openvpn.log

	# Set the appropriate level of log
	# file verbosity.
	#
	# 0 is silent, except for fatal errors
	# 4 is reasonable for general usage
	# 5 and 6 can help to debug connection problems
	# 9 is extremely verbose
	option verb 3

	# Silence repeating messages.  At most 20
	# sequential messages of the same message
	# category will be output to the log.
#	option mute 20


##############################################
# Sample client-side OpenVPN 2.0 uci config  #
# for connecting to multi-client server.     #
##############################################

config openvpn sample_client

	# Set to 1 to enable this instance:
	option enabled 0

	# Specify that we are a client and that we
	# will be pulling certain config file directives
	# from the server.
	option client 1

	# Use the same setting as you are using on
	# the server.
	# On most systems, the VPN will not function
	# unless you partially or fully disable
	# the firewall for the TUN/TAP interface.
#	option dev tap
	option dev tun

	# Are we connecting to a TCP or
	# UDP server?  Use the same setting as
	# on the server.
#	option proto tcp
	option proto udp

	# The hostname/IP and port of the server.
	# You can have multiple remote entries
	# to load balance between the servers.
	list remote "my_server_1 1194"
#	list remote "my_server_2 1194"

	# Choose a random host from the remote
	# list for load_balancing.  Otherwise
	# try hosts in the order specified.
#	option remote_random 1

	# Keep trying indefinitely to resolve the
	# host name of the OpenVPN server.  Very useful
	# on machines which are not permanently connected
	# to the internet such as laptops.
	option resolv_retry infinite

	# Most clients don't need to bind to
	# a specific local port number.
	option nobind 1

	# Try to preserve some state across restarts.
	option persist_key 1
	option persist_tun 1
	option user nobody

	# If you are connecting through an
	# HTTP proxy to reach the actual OpenVPN
	# server, put the proxy server/IP and
	# port number here.  See the man page
	# if your proxy server requires
	# authentication.
	# retry on connection failures:
#	option http_proxy_retry 1
	# specify http proxy address and port:
#	option http_proxy "192.168.1.100 8080"

	# Wireless networks often produce a lot
	# of duplicate packets.  Set this flag
	# to silence duplicate packet warnings.
#	option mute_replay_warnings 1

	# SSL/TLS parms.
	# See the server config file for more
	# description.  It's best to use
	# a separate .crt/.key file pair
	# for each client.  A single ca
	# file can be used for all clients.
	option ca /etc/openvpn/ca.crt
	option cert /etc/openvpn/client.crt
	option key /etc/openvpn/client.key

	# Verify server certificate by checking
	# that the certicate has the nsCertType
	# field set to "server".  This is an
	# important precaution to protect against
	# a potential attack discussed here:
	#  http://openvpn.net/howto.html#mitm
	#
	# To use this feature, you will need to generate
	# your server certificates with the nsCertType
	# field set to "server".  The build_key_server
	# script in the easy_rsa folder will do this.
#	option ns_cert_type server

	# If a tls_auth key is used on the server
	# then every client must also have the key.
#	option tls_auth "/etc/openvpn/ta.key 1"

	# Select a cryptographic cipher.
	# If the cipher option is used on the server
	# then you must also specify it here.
#	option cipher x

	# Enable compression on the VPN link.
	# Don't enable this unless it is also
	# enabled in the server config file.
	option comp_lzo yes

	# Set log file verbosity.
	option verb 3

	# Silence repeating messages
#	option mute 20
config php5-fpm
	option enabled 1
  config minidlna config
	option 'enabled' '1'
	option port '8200'
	option interface 'br-lan'
	option friendly_name 'OpenWrt DLNA Server'
	option db_dir '/var/run/minidlna'
	option log_dir '/var/log'
	option inotify '1'
	option enable_tivo '0'
	option strict_dlna '0'
	option presentation_url ''
	option notify_interval '900'
	option serial '12345678'
	option model_number '1'
	option root_container '.'
	list media_dir '/mnt'
	option album_art_names 'Cover.jpg/cover.jpg/AlbumArtSmall.jpg/albumartsmall.jpg/AlbumArt.jpg/albumart.jpg/Album.jpg/album.jpg/Folder.jpg/folder.jpg/Thumb.jpg/thumb.jpg'
  #
# You find additional information on Radicale Homepage
# http://radicale.org
#
# OpenWrt's wiki needs to be setup/updated ;-)
#
# if setting additional options please remember that UCI does not support
# section names and option names with "-" (Dash) inside their name
# to use them anyway replace "-" with "_" (Underscore)
# Each Radicale's config [section] is setup as UCI config setting 'section'
#

####################################################
# Server options
#
config setting 'server'

	# hostname:port
	# IPv4 syntax: address:port
	# IPv6 syntax: [address]:port
	# ATTENTION:
	# only use ports > 1024 (non-privileged Ports)
	# because this implementation is running as non-root user
	# Default: 0.0.0.0:5232
#	list hosts '0.0.0.0:5232'
#	list hosts 'localhost:5232'

	# SSL flag, enable HTTPS protocol
	# Default: 0 (disabled)
#	option ssl '1'

	# SSL Protocol used. See python's ssl module for available values
	# Default: PROTOCOL_SSLv23
#	option protocol 'PROTOCOL_SSLv23'

	# Ciphers available. See python's ssl module for available ciphers
#	option ciphers ''

	# SSL certificate path and file
#	option certificate '/etc/radicale/ssl/server.crt'

	# SSL private key path and file
#	option key '/etc/radicale/ssl/server.key'

	# Reverse DNS to resolve client address in logs
	# Default: 0 (disabled)
#	option dns_lookup '1'

	# Message displayed in the client when a password is needed
#	option realm 'Radicale - Password Required'


####################################################
# Encoding options
#
config	setting	'encoding'

	# Encoding for responding requests
#	option	request	'utf-8'

	# Encoding for storing local collections
#	option	stock	'utf-8'


####################################################
# Authentication options
#
config setting 'auth'

	# Authentication method
	# Value: None | htpasswd | IMAP | LDAP | PAM | courier | http | remote_user | custom
	# Default: None
	# if setting 'htpasswd' the file /etc/radicale/users is used (hardcoded)

	# Htpasswd encryption method
	# Value: plain | sha1 | ssha | crypt
#	option htpasswd_encryption 'crypt'

	# for other authenication methods consult Radicale documentation
	# and set options here


####################################################
# Git default options
#
config	setting	'git'

	# Git default options
#	option committer 'Radicale <radicale@example.com>'


####################################################
# Rights backend
#
config setting 'rights'

	# Value: None | authenticated | owner_only | owner_write | from_file | custom
	# Default: None
	# if setting 'from_file' the file /etc/radicale/rights is used (hardcoded)

	# Custom rights handler
#	option custom_handler ''


####################################################
# Storage backend
# -------
# WARNING: ONLY "filesystem" IS DOCUMENTED AND TESTED,
#          OTHER BACKENDS ARE NOT READY FOR PRODUCTION.
# -------
#
config setting 'storage'
	# Value: filesystem | multifilesystem | database | custom
	option	type			'filesystem'
	option	filesystem_folder	'/srv/radicale'


####################################################
# Additional HTTP headers
#
config	setting	'headers'
	# enable all if using CardDavMATE-, CalDavZAP- or InfCloud- WEBclient
#	list	Access_Control_Allow_Origin	'*'
#	list	Access_Control_Allow_Methods	'GET'
#	list	Access_Control_Allow_Methods	'POST'
#	list	Access_Control_Allow_Methods	'OPTIONS'
#	list	Access_Control_Allow_Methods	'PROPFIND'
#	list	Access_Control_Allow_Methods	'PROPPATCH'
#	list	Access_Control_Allow_Methods	'REPORT'
#	list	Access_Control_Allow_Methods	'PUT'
#	list	Access_Control_Allow_Methods	'MOVE'
#	list	Access_Control_Allow_Methods	'DELETE'
#	list	Access_Control_Allow_Methods	'LOCK'
#	list	Access_Control_Allow_Methods	'UNLOCK'
#	list	Access_Control_Allow_Headers	'User-Agent'
#	list	Access_Control_Allow_Headers	'Authorization'
#	list	Access_Control_Allow_Headers	'Content-type'
#	list	Access_Control_Allow_Headers	'Depth'
#	list	Access_Control_Allow_Headers	'If-match'
#	list	Access_Control_Allow_Headers	'If-None-Match'
#	list	Access_Control_Allow_Headers	'Lock-Token'
#	list	Access_Control_Allow_Headers	'Timeout'
#	list	Access_Control_Allow_Headers	'Destination'
#	list	Access_Control_Allow_Headers	'Overwrite'
#	list	Access_Control_Allow_Headers	'X-client'
#	list	Access_Control_Allow_Headers	'X-Requested-With'
#	list	Access_Control_Expose_Headers	'Etag'


####################################################
# Global logging options
#
config setting 'logging'

	# Set the default logging level to debug for all outputs (ignore output level settings)
	# Default: 0 (disabled)
#	option	debug	'1'
	# Log all environment variables (including those set in the shell) when starting
	# Default: 0 (disabled)
#	option	full_environment '1'


####################################################
# Spezial logging options
# !!! not documented in Radicale documentation
# !!! special settings for this implementation
#
config logging 'logger'

	# Level: DEBUG | INFO | WARNING | ERROR | CRITICAL
	# To nearly disable logging set level to critical

	# log level on console
#	option	console_level	'ERROR'

	# Here we use Rotating Logfiles in this implementation
	# !!! if maxbytes and/or backupcount is set to 0  !!!
	# !!! file rotation is disabled and logfile grows endless !!!
	# log level
#	option	file_level	'INFO'
	# directory where log files are written
#	option	file_path	'/var/log/radicale'
	# max size of each logfile (see warning above)
#	option	file_maxbytes	'8196'
	# number of backup files to create (see warning above)
#	option	file_backupcount	'1'

	# log level for syslog logging
#	option	syslog_level	'WARNING'
config tcpproxy
  option username 'nobody'
  option groupname 'nogroup'
#  option chroot "/var/run/tcpproxy"
#  option log 'syslog:3,tcpproxy,daemon'

config listen
  option disabled 1

  option local_port '8000'
  option resolv 'ipv4'

  option remote_addr 'www.google.at'
  option remote_port '80'
  option remote_resolv 'ipv6'
  option source_addr '2a02:3e0:2002:1:215:58ff:fe31:2ce7'

config listen
  option disabled 1

  option local_addr '2a02:3e0:2002:1:215:58ff:fe31:2ce7'
  option local_port '1234'

  option remote_addr 'www.google.at'
  option remote_port '80'
  option remote_resolv 'ipv4'
  config upmpdcli lan
	option interface 'br-lan'
#	option friendly_name 'upmpdcli'
#	option mpd_host '127.0.0.1'
#	option mpd_port '6600'
#	option upmpd_port '0'
#	option config '/etc/upmpdcli.conf'

# Add additional interfaces
#
#config upmpdcli wifi
#	option interface 'wlan0'

#config upmpdcli wan
#	option interface 'eth0'
config dump1090 main
	option disabled '1'
	option respawn '1'
	option device_index ''
	option gain ''
	option enable_agc '0'
	option freq ''
	option ifile ''
	option raw '0'
	option net '1'
	option modeac '0'
	option net_beast '0'
	option net_only '0'
	option net_bind_address ''
	option net_http_port '8080'
	option net_ri_port ''
	option net_ro_port ''
	option net_sbs_port ''
	option net_bi_port ''
	option net_bo_port ''
	option net_ro_size ''
	option net_ro_rate ''
	option net_heartbeat ''
	option net_buffer ''
	option lat ''
	option lon ''
	option fix '0'
	option no_fix '0'
	option no_crc_check '0'
	option phase_enhance '0'
	option aggressive '0'
	option mlat '0'
	option stats '0'
	option stats_every ''
	option onlyaddr '0'
	option metric '0'
	option snip ''
	option debug ''
	option ppm ''
  config rtpproxy global
	option enabled 0						# 0 - disabled, 1 - enabled

config instance 'site1'                
        option socket 'udp:127.0.0.1:7723'				# socket
	option ipaddr '127.0.0.1'					# IPv4 address
	option ip6addr '2001:0db8:0000:0000:0000:0000:1428:57ab'	# IPv6 address
	option user 'nobody'						# userid to run rtpproxy instance from
	option opts ''							# additional options for rtpproxy instance
                                      
config instance 'site2'               
        option socket 'udp:127.0.0.1:7724'
	option ipaddr '192.168.1.1'
config defaults
	option syn_flood	1
	option input		ACCEPT
	option output		ACCEPT
	option forward		REJECT
# Uncomment this line to disable ipv6 rules
#	option disable_ipv6	1

config zone
	option name		lan
	list   network		'lan'
	option input		ACCEPT
	option output		ACCEPT
	option forward		ACCEPT

config zone
	option name		wan
	list   network		'wan'
	list   network		'wan6'
	option input		REJECT
	option output		ACCEPT
	option forward		REJECT
	option masq		1
	option mtu_fix		1

config forwarding
	option src		lan
	option dest		wan

# We need to accept udp packets on port 68,
# see https://dev.openwrt.org/ticket/4108
config rule
	option name		Allow-DHCP-Renew
	option src		wan
	option proto		udp
	option dest_port	68
	option target		ACCEPT
	option family		ipv4

# Allow IPv4 ping
config rule
	option name		Allow-Ping
	option src		wan
	option proto		icmp
	option icmp_type	echo-request
	option family		ipv4
	option target		ACCEPT

config rule
	option name		Allow-IGMP
	option src		wan
	option proto		igmp
	option family		ipv4
	option target		ACCEPT

# Allow DHCPv6 replies
# see https://dev.openwrt.org/ticket/10381
config rule
	option name		Allow-DHCPv6
	option src		wan
	option proto		udp
	option src_ip		fe80::/10
	option src_port		547
	option dest_ip		fe80::/10
	option dest_port	546
	option family		ipv6
	option target		ACCEPT

config rule
	option name		Allow-MLD
	option src		wan
	option proto		icmp
	option src_ip		fe80::/10
	list icmp_type		'130/0'
	list icmp_type		'131/0'
	list icmp_type		'132/0'
	list icmp_type		'143/0'
	option family		ipv6
	option target		ACCEPT

# Allow essential incoming IPv6 ICMP traffic
config rule
	option name		Allow-ICMPv6-Input
	option src		wan
	option proto	icmp
	list icmp_type		echo-request
	list icmp_type		echo-reply
	list icmp_type		destination-unreachable
	list icmp_type		packet-too-big
	list icmp_type		time-exceeded
	list icmp_type		bad-header
	list icmp_type		unknown-header-type
	list icmp_type		router-solicitation
	list icmp_type		neighbour-solicitation
	list icmp_type		router-advertisement
	list icmp_type		neighbour-advertisement
	option limit		1000/sec
	option family		ipv6
	option target		ACCEPT

# Allow essential forwarded IPv6 ICMP traffic
config rule
	option name		Allow-ICMPv6-Forward
	option src		wan
	option dest		*
	option proto		icmp
	list icmp_type		echo-request
	list icmp_type		echo-reply
	list icmp_type		destination-unreachable
	list icmp_type		packet-too-big
	list icmp_type		time-exceeded
	list icmp_type		bad-header
	list icmp_type		unknown-header-type
	option limit		1000/sec
	option family		ipv6
	option target		ACCEPT

# include a file with users custom iptables rules
config include
	option path /etc/firewall.user


### EXAMPLE CONFIG SECTIONS
# do not allow a specific ip to access wan
#config rule
#	option src		lan
#	option src_ip	192.168.45.2
#	option dest		wan
#	option proto	tcp
#	option target	REJECT

# block a specific mac on wan
#config rule
#	option dest		wan
#	option src_mac	00:11:22:33:44:66
#	option target	REJECT

# block incoming ICMP traffic on a zone
#config rule
#	option src		lan
#	option proto	ICMP
#	option target	DROP

# port redirect port coming in on wan to lan
#config redirect
#	option src			wan
#	option src_dport	80
#	option dest			lan
#	option dest_ip		192.168.16.235
#	option dest_port	80
#	option proto		tcp

# port redirect of remapped ssh port (22001) on wan
#config redirect
#	option src		wan
#	option src_dport	22001
#	option dest		lan
#	option dest_port	22
#	option proto		tcp

# allow IPsec/ESP and ISAKMP passthrough
config rule
	option src		wan
	option dest		lan
	option proto		esp
	option target		ACCEPT

config rule
	option src		wan
	option dest		lan
	option dest_port	500
	option proto		udp
	option target		ACCEPT

### FULL CONFIG SECTIONS
#config rule
#	option src		lan
#	option src_ip	192.168.45.2
#	option src_mac	00:11:22:33:44:55
#	option src_port	80
#	option dest		wan
#	option dest_ip	194.25.2.129
#	option dest_port	120
#	option proto	tcp
#	option target	REJECT

#config redirect
#	option src		lan
#	option src_ip	192.168.45.2
#	option src_mac	00:11:22:33:44:55
#	option src_port		1024
#	option src_dport	80
#	option dest_ip	194.25.2.129
#	option dest_port	120
#	option proto	tcp
config dropbear
	option PasswordAuth 'on'
	option RootPasswordAuth 'on'
	option Port         '22'
#	option BannerFile   '/etc/banner'
config 'etherwake' 'setup'
	# possible program pathes
	option 'pathes' '/usr/bin/etherwake /usr/bin/ether-wake'
	# use sudo, defaults to off
	option 'sudo' 'off'
	# interface, defaults to 'eth0'
	# -i <ifname>
	option 'interface' ''
	# send wake-up packet to the broadcast address, defaults to off
	# -b
	option 'broadcast' 'off'

config 'target'
	# name for the target
	option 'name' 'example'
	# mac address to wake up
	option 'mac' '11:22:33:44:55:66'
	# password in hex without any delimiters
	option 'password' 'AABBCCDDEEFF'
	# wake up on system start, defaults to off
	option 'wakeonboot' 'off'

# To add a new target use:
#  uci add etherwake target
#  uci set etherwake.@target[-1].name=example
#  uci set etherwake.@target[-1].mac=11:22:33:44:55:66
#  uci set etherwake.@target[-1].password=AABBCCDDEEFF
#  uci set etherwake.@target[-1].wakeonboot=off
# Global settings for MAC-Telnet daemon
config mactelnetd
	option sshmode '0'
	list interface 'lan'

# Define a MAC-Telnet login, multiple login sections allowed
config login
	option username 'root'
	option password ''
  config memcached
	option user 'nobody'
	option maxconn '1024'
	option listen '0.0.0.0'
	option port '11211'
	option memory '64'
  config ntpserver
	option hostname '0.openwrt.pool.ntp.org'
	option port     '123'

config ntpserver
	option hostname '1.openwrt.pool.ntp.org'
	option port     '123'

config ntpserver
	option hostname '2.openwrt.pool.ntp.org'
	option port     '123'

config ntpserver
	option hostname '3.openwrt.pool.ntp.org'
	option port     '123'

config ntpdrift
	option freq     '0'

config ntpclient
	option interval	600
	#option count	10
	#option interface wan
  config softflowd
	option enabled        '0'
	option interface      'br-lan'
	option pcap_file      ''
	option timeout        ''
	option max_flows      '8192'
	option host_port      ''
	option pid_file       '/var/run/softflowd.pid'
	option control_socket '/var/run/softflowd.ctl'
	option export_version '5'
	option hoplimit       ''
	option tracking_level 'full'
	option track_ipv6     '0'
	option sampling_rate  '100'
  config tinyproxy

#
# Enable the proxy
#
option enabled 0

#
# Name of the user the tinyproxy daemon should switch to after the port
# has been bound.
#
option User nobody
option Group nogroup

#
# Port to listen on.
#
option Port 8888

#
# If you have multiple interfaces this allows you to bind to only one. If
# this is commented out, tinyproxy will bind to all interfaces present.
#
#option Listen 192.168.0.1

#
# The Bind directive allows you to bind the outgoing connections to a
# particular IP address.
#
#option Bind 192.168.0.1

#
# Timeout: The number of seconds of inactivity a connection is allowed to
# have before it closed by tinyproxy.
#
option Timeout 600

#
# ErrorFile: Defines the HTML file to send when a given HTTP error
# occurs.  You will probably need to customize the location to your
# particular install.  The usual locations to check are:
#   /usr/local/share/tinyproxy
#   /usr/share/tinyproxy
#   /etc/tinyproxy
#
#option ErrorFile_404 "/usr/share/tinyproxy/404.html"
#option ErrorFile_400 "/usr/share/tinyproxy/400.html"
#option ErrorFile_503 "/usr/share/tinyproxy/503.html"
#option ErrorFile_403 "/usr/share/tinyproxy/403.html"
#option ErrorFile_408 "/usr/share/tinyproxy/408.html"

# 
# DefaultErrorFile: The HTML file that gets sent if there is no
# HTML file defined with an ErrorFile keyword for the HTTP error
# that has occured.
#
option DefaultErrorFile "/usr/share/tinyproxy/default.html"

#
# StatFile: The HTML file that gets sent when a request is made
# for the stathost.  If this file doesn't exist a basic page is
# hardcoded in tinyproxy.
#
option StatFile "/usr/share/tinyproxy/stats.html"

#
# Where to log the information. Either LogFile or Syslog should be set,
# but not both.
#
option LogFile "/var/log/tinyproxy.log"
#option Syslog 1

#
# Set the logging level. Allowed settings are:
#	Critical	(least verbose)
#	Error
#	Warning
#	Notice
#	Connect		(to log connections without Info's noise)
#	Info		(most verbose)
# The LogLevel logs from the set level and above. For example, if the LogLevel
# was set to Warning, than all log messages from Warning to Critical would be
# output, but Notice and below would be suppressed.
#
option LogLevel Info

#
# Include the X-Tinyproxy header, which has the client's IP address when
# connecting to the sites listed.
#
# list XTinyproxy mydomain.com

#
# This is the absolute highest number of threads which will be created. In
# other words, only MaxClients number of clients can be connected at the
# same time.
#
option MaxClients 100

#
# These settings set the upper and lower limit for the number of
# spare servers which should be available. If the number of spare servers
# falls below MinSpareServers then new ones will be created. If the number
# of servers exceeds MaxSpareServers then the extras will be killed off.
#
option MinSpareServers 5
option MaxSpareServers 20

#
# Number of servers to start initially.
#
option StartServers 10

#
# MaxRequestsPerChild is the number of connections a thread will handle
# before it is killed. In practise this should be set to 0, which disables
# thread reaping. If you do notice problems with memory leakage, then set
# this to something like 10000
#
option MaxRequestsPerChild 0

#
# The following is the authorization controls. If there are any access
# control keywords then the default action is to DENY. Otherwise, the
# default action is ALLOW.
#
# Also the order of the controls are important. The incoming connections
# are tested against the controls based on order.
#
list Allow 127.0.0.1
#list Allow 192.168.0.0/16
#list Allow 172.16.0.0/12
#list Allow 10.0.0.0/8

#
# The "Via" header is required by the HTTP RFC, but using the real host name
# is a security concern.  If the following directive is enabled, the string
# supplied will be used as the host name in the Via header; otherwise, the
# server's host name will be used.
#
option ViaProxyName "tinyproxy"

#
# The location of the filter file.
#
#option Filter "/etc/tinyproxy/filter"

#
# Filter based on URLs rather than domains.
#
#option FilterURLs 1

#
# Use POSIX Extended regular expressions rather than basic.
#
#option FilterExtended 1

#
# Use case sensitive regular expressions.
#                                                                         
#option FilterCaseSensitive 1

#
# Change the default policy of the filtering system.  If this directive is
# commented out, or is set to "0" then the default policy is to allow
# everything which is not specifically denied by the filter file.
#
# However, by setting this directive to "1" the default policy becomes to
# deny everything which is _not_ specifically allowed by the filter file.
#
#option FilterDefaultDeny 1

#
# If an Anonymous keyword is present, then anonymous proxying is enabled.
# The headers listed are allowed through, while all others are denied. If
# no Anonymous keyword is present, then all header are allowed through.
# You must include quotes around the headers.
#
#list Anonymous "Host"
#list Anonymous "Authorization"

#
# This is a list of ports allowed by tinyproxy when the CONNECT method
# is used.  To disable the CONNECT method altogether, set the value to 0.
# If no ConnectPort line is found, all ports are allowed (which is not
# very secure.)
#
# The following two ports are used by SSL.
#
list ConnectPort 443
list ConnectPort 563

#
# Turns on upstream proxy support.
#
# The upstream rules allow you to selectively route upstream connections
# based on the host/domain of the site being accessed.
#
# For example:
#  # connection to test domain goes through testproxy
#
#config upstream
#	option type proxy
#	option via testproxy:8008
#	option target ".test.domain.invalid"
#
#config upstream
#	option type proxy
#	option via testproxy:8008
#	option target ".our_testbed.example.com"
#
#config upstream
#	option type proxy
#	option via testproxy:8008
#	option target "192.168.128.0/255.255.254.0"
#
#  # no upstream proxy for internal websites and unqualified hosts
#
#config upstream
#	option type reject
#	option target ".internal.example.com"
#
#config upstream
#	option type reject
#	option target "www.example.com"
#
#config upstream
#	option type reject
#	option target "10.0.0.0/8"
#
#config upstream
#	option type reject
#	option target "192.168.0.0/255.255.254.0"
#
#config upstream
#	option type reject
#	option target "."
#
#  # default upstream is internet firewall
#
#config upstream
#	option type proxy
#	option via firewall.internal.example.com:80
#
# The LAST matching rule wins the route decision.  As you can see, you
# can use a host, or a domain:
#  name     matches host exactly
#  .name    matches any host in domain "name"
#  .        matches any host with no domain (in 'empty' domain)
#  IP/bits  matches network/mask
#  IP/mask  matches network/mask
config shairplay main
	option disabled '1'
	option respawn '1'
	option apname 'AirPlay'
	option port '5000'
	option password ''
	option hwaddr ''
	option ao_driver 'oss'
	option ao_devicename ''
	option ao_deviceid ''
  config shairport main
	option disabled '1'
	option respawn '1'
	option bname 'AirPort'
	option password ''
	option port '5002'
	option buffer ''
	option log_file ''
	option err_file ''
	option meta_dir ''
	option cmd_start ''
	option cmd_stop ''
	option cmd_wait '0'
	option audio_output 'alsa'
	option mdns 'avahi'

	# options for alsa output
	option output_dev ''
	option mixer_dev ''
	option mixer_type ''
	option mixer_control ''
	option mixer_index ''

	# options for ao output
	option ao_driver ''
	option ao_name ''
	option ao_id ''
	option ao_options ''

	# options for pipe output
	option output_fifo ''

	# options for pulse output
	option pulse_server ''
	option pulse_sink ''
	option pulse_appname ''
  config bluetoothd
#	option config	/etc/bluetooth/main.conf
	option enabled	1

config hciattach
	option initspeed	115200
	option tty	ttyS1
	option type	csr
	option speed	115200
	option flow	noflow
	option enabled 	0

config rfcomm
#	option config	/etc/bluetooth/rfcomm.conf
	option enabled	0
  config igmpproxy
	option quickleave 1

config phyint wan
	option network wan
	option direction upstream
	list altnet 192.168.1.0/24

config phyint lan
	option network lan
	option direction downstream
  # declare an ipset-dns listener instance, multiple allowed
config ipset-dns
	# use given ipset for type A (IPv4) responses
	option ipset 'domain-filter-ipv4'

	# use given ipset for type AAAA (IPv6) responses
	option ipset6 'domain-filter-ipv6'

	# use given listening port
	# defaults to 53000 + instance number
	#option port  '53001'

	# use given upstream DNS server,
	# defaults to first entry in /tmp/resolv.conf.auto
	#option dns   '8.8.8.8'
config postgresql config
	option PGUSER	postgres
	option PGDATA	/var/postgresql/data
	option PGLOG	/var/postgresql/data/postgresql.log
	option PG_CTL	/usr/bin/pg_ctl
  config e2guardian 'e2guardian'
	option config_file '/etc/e2guardian/e2guardianf1.conf'
	option languagedir '/usr/share/e2guardian/languages'
	option language 'ukenglish'
	option loglevel '2'
	option logexceptionhits '2'
	option logfileformat '1'
	option loglocation '/dev/null'
	option maxuploadsize '-1'
	option filterip ''
	option filterports '8080'
	option proxyip '127.0.0.1'
	option proxyport '3128'
	option proxytimeout '20'
	option proxyexchange '20'
	option pcontimeout '55'
	option accessdeniedaddress 'http://YOURSERVER.YOURDOMAIN/cgi-bin/e2guardian.pl'
	option usecustombannedimage 'on'
	option custombannedimagefile '/usr/share/e2guardian/transparent1x1.gif'
	option usecustombannedflash 'on'
	option custombannedflashfile '/usr/share/e2guardian/blockedflash.swf'
	option filtergroups '1'
	option filtergroupslist '/etc/e2guardian/lists/filtergroupslist'
	option bannediplist '/etc/e2guardian/lists/bannediplist'
	option exceptioniplist '/etc/e2guardian/lists/exceptioniplist'
	option perroomdirectory '/etc/e2guardian/lists/bannedrooms/'
	option showweightedfound 'on'
	option weightedphrasemode '2'
	option urlcachenumber '1000'
	option urlcacheage '900'
	option scancleancache 'on'
	option phrasefiltermode '2'
	option preservecase '0'
	option hexdecodecontent 'off'
	option forcequicksearch 'off'
	option reverseaddresslookups 'off'
	option reverseclientiplookups 'off'
	option logclienthostnames 'off'
	option createlistcachefiles 'on'
	option prefercachedlists 'off'
	option maxcontentfiltersize '256'
	option maxcontentramcachescansize '2000'
	option maxcontentfilecachescansize '20000'
	option filecachedir '/tmp'
	option deletedownloadedtempfiles 'on'
	option initialtrickledelay '20'
	option trickledelay '10'
	option downloadmanager '/etc/e2guardian/downloadmanagers/default.conf'
	option contentscannertimeout '60'
	option contentscanexceptions 'off'
	option recheckreplacedurls 'off'
	option forwardedfor 'off'
	option usexforwardedfor 'off'
	option logconnectionhandlingerrors 'on'
	option logchildprocesshandling 'off'
	option maxchildren '180'
	option minchildren '20'
	option minsparechildren '16'
	option preforkchildren '10'
	option maxsparechildren '32'
	option maxagechildren '500'
	option maxips '0'
	option ipcfilename '/tmp/.dguardianipc'
	option urlipcfilename '/tmp/.dguardianurlipc'
	option ipipcfilename '/tmp/.dguardianipipc'
	option nodaemon 'off'
	option nologger 'off'
	option logadblocks 'off'
	option loguseragent 'off'
	option softrestart 'off'
  config bandwidthd
	option dev	br-lan
	option subnets		"192.168.1.0/24"
	option skip_intervals	0
	option graph_cutoff	1024
	option promiscuous	true
	option output_cdf	false
	option recover_cdf	false
	option filter		ip
	option graph		true
	option meta_refresh	150
  config wifitoggle
	option button	'wps'

	option persistent	'0' 
	option timer		'600'

	option led_sysfs		'wrt160nl:amber:wps'
	option led_enable_trigger	'timer' 
	option led_enable_delayon	'500'
	option led_enable_delayoff	'500'
	option led_disable_default	'0'
  
config 'global' 'state'
	option 'started' '0'

config 'profile_top' 'internal_top'

config 'profile_top' 'external_top'

config 'external_gateway' 'external_example'
#
#
# Here you find a description on every parameter supported
# and used by ddns-scripts and corresponding LuCI application
#
# Inside your ddns configuration file (/etc/config/ddns)
# you might not find some of below described options.
# This is because you don't need to define options
# if using there defaults. The LuCI application will delete
# options that configured to there default values.
#
# If you have a working ddns configuration from old ddns-scripts (Version 1.x)
# everything will function the same with new scripts
# without any changes to the configuration.
#
# If you like to use this file for your configuration then
# use a copy, because the used software to modify the
# configuration files will throw away all empty lines
# and those starting with # (comments).
#

#####################################################################
# Global application settings
#
config ddns "global"

	###########
	# set date format to use for display date in logfiles
	# and LuCI web application.
	# For codes see man pages of date command.
	# default: "%F %R" (ISO 8601 format)
#	option ddns_dateformat "%F %R"

	###########
	# set run directory to use for .pid and .update files
	# there will be a separate file for every running service section
	# default: "/var/run/ddns"
#	option ddns_rundir "/var/run/ddns"

	###########
	# set log directory to use for .log files
	# there will be a separate file for every running service section
	# default: "/var/log/ddns"
#	option ddns_logdir "/var/log/ddns"

	###########
	# set number of lines stored in .log file before auto truncated
	# default: "250" lines
#	option ddns_loglines "250"

	###########
	# Whether to allow to send Private/Special IP's to the DDNS provider
	# IPv4: 0.x, 10.x, 127.x, 172.16.x-172.31.x, 192.168.x
	# IPv6: ::, Fxxx:
	# default: "0"	disabled
#	option upd_privateip "0"

#####################################################################
# DDNS service settings
#
# for each service you want to serve you need a separate configuration
# if you need IPv4 and IPv6 you need to setup 2 separate configurations
# with different names. (i.e. "myddns_ipv4" and "myddns_ipv6")
# do not use white-spaces or dashes "-" or "@" ":" "!" or
# other special characters inside name.
config service "myddns"

	########### Basic settings ########################

	###########
	# enable/disable this service section
	# default: "0"	disabled
	option enabled "0"

	###########
	# detecting/sending IPv4 or IPv6 address to the DDNS provider
	# set to "1" if you want to use IPv6
	# default: "0"	use IPv4
	option use_ipv6 "0"

	###########
	# defines the network as defined in /etc/config/network
	# to be monitored for up/down events to start via hotplug
	default: "wan"	for IPv4
	default: "wan6"	for IPv6
	option interface "wan"

	###########
	# Next you need to specify the name of the service you are
	# connecting to "eg. dyndns.org".  The format of the update
	# urls for several different dynamic dns services is specified
	# in the "/usr/lib/ddns/services" file for IPv4 and in
	# "/usr/lib/ddns/service_ipv6" file. This list is hardly complete
	# as there are many, many different dynamic dns services.
	# If your service is on the list you can merely specify it with the
	# "service_name" option.  Otherwise you will need to determine
	# the format of the url to update with.  You can either add an
	# entry to the "/usr/lib/ddns/services" or "services_ipv6" file
	# or specify this with the "update_url" option.
	# If your ddns provider doesn't work with ddns-scripts because
	# there are additional parameters or other special thinks to be done,
	# then you could write your own script to send updates to your ddns provider.
	# Have a look into /usr/lib/ddns/update_sample.sh
	# The script is specified in "update_script"
	# Either set "service_name" or one of "update_url" and "update_script"
	# default: none
	option service_name "dyndns.org"

	# sample:
	# "http://[USERNAME]:[PASSWORD]@members.dyndns.org/nic/update?hostname=[DOMAIN]&myip=[IP]"
#	option update_url   ""

	# sample:
	# "/usr/lib/ddns/update_sample.sh"
#	option update_script   ""

	###########
	# Keep an eye on providers help pages.
	#
	# FQDN of ONE of your defined host at DDNS provider
	# REQUIRED to verify what the current IP at DNS using nslookup/host command
	# default: none
	option lookup_host ""

	# Your DNS name / replace [DOMAIN] in update_url
	# default: none
	option domain ""

	# Username of your DDNS service account / replace [USERNAME] in update_url
	# default: none
	option username ""

	# Password of your DDNS service account / replace [PASSWORD] in update url
	# default: none
	option password ""

	###########
	# Optional parameters for use inside update_url
	#
	# parameter that will be urlencoded before replacement of [PARAMENC] inside update url
	# default: none
	option param_enc ""

	# parameter that repace [PARAMOPT] inside update url
	# default: none
	option param_opt ""

	###########
	# use HTTPS for secure communication with you DDNS provider
	# personally found some providers having problems when not sending
	# updates via HTTPS. You must not specify "https://" in update_url.
	# It's modified by the scripts themselves
	# Needs GNU Wget (with SSL support) or cURL to be installed.
	# default: "0"	do not use HTTPS
	option use_https "0"

	# if using HTTPS (see above) the transfer program tries to verify
	# the providers server certificate. For verification there needs to be
	# the counterpart on this machine. Specify the path or path/file where
	# the transfer program can find them. (might need package CA-certificates)
	# if you don't want to verify servers certificate (insecure) you should
	# this parameter to "IGNORE" (in capital letters)
	# default: (none)	path where CA-certificate package is installed
	option cacert "/etc/ssl/certs"

	###########
	# for logging and control if everything work fine you can get information inside
	# system log . Critical Errors are always send to system log.
	# You can define which information you like to log
	# 1 == info, notice, warning, errors
	# 2 == notice, warning, errors
	# 3 == warning, errors
	# 4 == errors
	# default: "0" off
	option use_syslog  "0"

	###########
	# for logging and control if everything work fine you can get information inside
	# log file. You find the file per default in /var/log/ddns/[sectionname].log
	# The path can be modified for all log files in ddns.global section (see above)
	# default: "1" on
	option use_logfile "1"

	########### Advanced settings #####################

	###########
	# you need to specify how ddns-scripts should detect you current local ip.
	# the ip_source could be set to "network", "web", "interface" or "script"
	# the parameters below specifying the additional information needed for
	# the corresponding ip_spource configuration
	# default: "network"

	# ip_source "network" additional uses option ip_network and detects the
	# current local ip on network as defined in /etc/config/network
	# default: "wan"  using IPv4
	# default: "wan6" using IPv6
	option ip_source  "network"
	option ip_network "wan"

	# ip_source "web" additional uses option ip_url and detects the current
	# local ip from special web sides that response with the ip address of
	# calling host. If you are behind a firewall/NAT this is the best option
	# since none of the local networks or interfaces will have the external ip.
	# default: "http://checkip.dyndns.com"   using IPv4
	# default: "http://checkipv6.dyndns.com" using IPv6
#	option ip_source "web"
#	option ip_url    "http://checkip.dyndns.com"

	# ip_source "interface" additional uses option ip_interface
	# ip_source "interface" uses one of the locally installed physical interfaces
	# to detect independent from network they configured to.
	# default: none
#	option ip_source    "interface"
#	option ip_interface "eth1"

	# ip_source "script" additional uses option ip_script
	# it's useful if you want to write your own script to detect the
	# current local ip. put full path into ip_script option.
	# The script must be executable.
	# default: none
#	option ip_source "script"
#	option ip_script ""

	###########
	# force_ipversion option will set the "-4" respectively "-6" parameter
	# on command line of transfer and DNS lookup program.
	# So the whole communication uses the selected IP version between both ends.
	# needs GNU Wget or cURL installed for transfer and
	# BIND's host for DNS lookup.
	# default: "0" disabled
	option force_ipversion "0"

	###########
	# Normally the current (in the internet) registered ip is detected using the
	# local defined name lookup policies (i.e. /etc/resolve.conf etc.)
	# Specify here a DNS server to use instead of the defaults.
	# you can use hostname or ip address
	# i.e. "google-public-dns-a.google.com"
	# default: none
#	option dns_server "google-public-dns-a.google.com"

	# By default every DNS call is made via UDP protocol
	# Some internet provider offer modems that cache UDP DNS requests.
	# They also redirect calls to external servers to local.
	# To force the usage of TCP for DNS requests enable this option
	# Needs BIND's host program be installed
	# default: "0" disabled
#	option force_dnstcp "0"

	###########
	# If a Proxy is need to access HTTP/HTTPS pages on the WEB
	# it can be configured here also for sending updates to the
	# DDNS provider. If you configured use_https='1' above, you
	# need to setup your HTTPS proxy here, otherwise your
	# HTTP proxy. !!! You should not detect your current IP
	# ip_source='web' (see above) because this request is also
	# send via the configured proxy !!!
	# Syntax: [user:password@]proxy:port !port is required !
	# IPv6 address must be in squared brackets "[...]"
	# default: none
#	option proxy ''

	###########
	# In some very special configurations i.e. Multi WAN environment
	# in a NAT cascade it might be necessary to define
	# a network to use for communication.
	# should use option ip_source "web" (see above)
	# Needs GNU Wget (with SSL support) or cURL to be installed.
	# GNU Wget will use IP address and cURL the physical device 
	# of the given network
	# default: none
#	option bind_network "wan7"

	########### Timer settings ########################

	###########
	# defines the time interval to check if local IP has changed
	# After the first start and first update send, the system will
	# wait this time before verify if update was successful send.
	# !!! checks below 5 minutes make no sense because the Internet
	# needs about 5-10 minutes to sync an IP-change to all DNS servers !!!
	# accepted unit entry’s: 'seconds' 'minutes' 'hours'
	# minimum 5 minutes == 300 seconds
	# default 10 minutes
	option check_interval	'10'
	option check_unit	'minutes'

	###########
	# force to send an update to service provider, if no change was detected.
	# consult DDNS providers documentation if your DDNS entry might timeout.
	# accepted unit entry’s: 'minutes' 'hours' 'days'
	# minimum needs to be greater or equal check interval (see above)
	# A special setting of '0' is allowed, which forces the script to run once.
	# It sends an update, verify if update was accepted by DNS
	# (retry if not) and finish. Useful if you want to start by your own (i.e. cron)
	# default 3 days == 72 hours
	option force_interval	'72'
	option force_unit	'hours'

	###########
	# if error happen on detecting, sending or updating the
	# script will retry the relevant action for retry_count times
	# before stopping script execution.
	# default: 5
	option retry_count '5'

	###########
	# if error happen on detecting, sending or updating the
	# script will retry the relevant action.
	# here you define the time to wait before retry is started
	# accepted unit entry’s: 'seconds' 'minutes'
	# default: 60 seconds
	option retry_interval	'60'
	option retry_unit	'seconds'
  config php5-fastcgi
	option enabled 1
	option port '1026'
  config dansguardian 'dansguardian'
	option config_file '/etc/dansguardian/dansguardianf1.conf'
	option accessdeniedaddress 'http://YOURSERVER.YOURDOMAIN/cgi-bin/dansguardian.pl'
	option bannediplist '/etc/dansguardian/lists/bannediplist'
	option contentscanexceptions 'off'
	option contentscannertimeout '60'
	option createlistcachefiles 'on'
	option custombannedflashfile '/usr/share/dansguardian/blockedflash.swf'
	option custombannedimagefile '/usr/share/dansguardian/transparent1x1.gif'
	option deletedownloadedtempfiles 'on'
	option downloadmanager '/etc/dansguardian/downloadmanagers/default.conf'
	option exceptioniplist '/etc/dansguardian/lists/exceptioniplist'
	option filecachedir '/tmp'
	option filtergroups '1'
	option filtergroupslist '/etc/dansguardian/lists/filtergroupslist'
	option filterip ''
	option filterports '8080'
	option forcequicksearch 'off'
	option forwardedfor 'off'
	option hexdecodecontent 'off'
	option initialtrickledelay '20'
	option ipcfilename '/tmp/.dguardianipc'
	option ipipcfilename '/tmp/.dguardianipipc'
	option languagedir '/usr/share/dansguardian/languages'
	option language 'ukenglish'
	option logadblocks 'off'
	option logchildprocesshandling 'off'
	option logclienthostnames 'off'
	option logconnectionhandlingerrors 'on'
	option logexceptionhits '2'
	option logfileformat '1'
	option loglevel '2'
	option loglocation '/dev/null'
	option logsyslog 'on'
	option loguseragent 'off'
	option maxagechildren '500'
	option maxchildren '120'
	option maxcontentfilecachescansize '20000'
	option maxcontentfiltersize '256'
	option maxcontentramcachescansize '2000'
	option maxips '0'
	option maxsparechildren '32'
	option maxuploadsize '-1'
	option minchildren '8'
	option minsparechildren '4'
	option nodaemon 'off'
	option nologger 'off'
	option nonstandarddelimiter 'on'
	option perroomblockingdirectory '/etc/dansguardian/lists/bannedrooms/'
	option phrasefiltermode '2'
	option prefercachedlists 'off'
	option preforkchildren '6'
	option preservecase '0'
	option proxyip '127.0.0.1'
	option proxyport '3128'
	option proxytimeout '20'
	option recheckreplacedurls 'off'
	option reportinglevel '3'
	option reverseaddresslookups 'off'
	option reverseclientiplookups 'off'
	option scancleancache 'on'
	option showweightedfound 'on'
	option softrestart 'off'
	option trickledelay '10'
	option urlcacheage '900'
	option urlcachenumber '1000'
	option urlipcfilename '/tmp/.dguardianurlipc'
	option usecustombannedflash 'on'
	option usecustombannedimage 'on'
	option usexforwardedfor 'off'
	option weightedphrasemode '2'
  config kismet_drone
    option enabled 0
    config transmission
	option enabled 0
	option config_dir '/tmp/transmission'
	#option user 'nobody'
	option alt_speed_down 50
	option alt_speed_enabled false
	option alt_speed_time_begin  540
	option alt_speed_time_day 127
	option alt_speed_time_enabled false
	option alt_speed_time_end 1020
	option alt_speed_up 50
	option bind_address_ipv4 '0.0.0.0'
	option bind_address_ipv6 '::'
	option blocklist_enabled false
	option blocklist_url ''
	option cache_size_mb 2
	option dht_enabled true
	option download_dir '/tmp/transmission/done'
	option download_queue_enabled true
	option download_queue_size 4
	option encryption 1
	option idle_seeding_limit 30
	option idle_seeding_limit_enabled false
	option incomplete_dir '/tmp/transmission/incomplete'
	option incomplete_dir_enabled false
	option lazy_bitfield_enabled true
	option lpd_enabled false
	option message_level 1
	option peer_congestion_algorithm ''
	option peer_limit_global 240
	option peer_limit_per_torrent 60
	option peer_port 51413
	option peer_port_random_high 65535
	option peer_port_random_low 49152
	option peer_port_random_on_start false
	option peer_socket_tos 'default'
	option pex_enabled true
	option port_forwarding_enabled true
	option preallocation 1
	option prefetch_enabled true
	option queue_stalled_enabled true
	option queue_stalled_minutes 30
	option ratio_limit 2.0000
	option ratio_limit_enabled false
	option rename_partial_files true
	option rpc_authentication_required false
	option rpc_bind_address '0.0.0.0'
	option rpc_enabled true
	option rpc_password ''
	option rpc_port 9091
	option rpc_url '/transmission/'
	option rpc_username ''
	option rpc_whitelist '127.0.0.1,192.168.1.*'
	option rpc_whitelist_enabled true
	option scrape_paused_torrents_enabled true
	option script_torrent_done_enabled false
	option script_torrent_done_filename ''
	option seed_queue_enabled false
	option seed_queue_size 10
	option speed_limit_down 100
	option speed_limit_down_enabled false
	option speed_limit_up 20
	option speed_limit_up_enabled false
	option start_added_torrents true
	option trash_original_torrent_files false
	option umask 18
	option upload_slots_per_torrent 14
	option utp_enabled true
	option scrape_paused_torrents true
	option watch_dir_enabled false
	option watch_dir ''
  # Example hostapd build time configuration
#
# This file lists the configuration options that are used when building the
# hostapd binary. All lines starting with # are ignored. Configuration option
# lines must be commented out complete, if they are not to be included, i.e.,
# just setting VARIABLE=n is not disabling that variable.
#
# This file is included in Makefile, so variables like CFLAGS and LIBS can also
# be modified from here. In most cass, these lines should use += in order not
# to override previous values of the variables.

# Driver interface for Host AP driver
CONFIG_DRIVER_HOSTAP=y

# Driver interface for wired authenticator
CONFIG_DRIVER_WIRED=y

# Driver interface for Prism54 driver
#CONFIG_DRIVER_PRISM54=y

# Driver interface for drivers using the nl80211 kernel interface
CONFIG_DRIVER_NL80211=y
# driver_nl80211.c requires a rather new libnl (version 1.1) which may not be
# shipped with your distribution yet. If that is the case, you need to build
# newer libnl version and point the hostapd build to use it.
#LIBNL=/usr/src/libnl
#CFLAGS += -I$(LIBNL)/include
#LIBS += -L$(LIBNL)/lib

# Driver interface for FreeBSD net80211 layer (e.g., Atheros driver)
#CONFIG_DRIVER_BSD=y
#CFLAGS += -I/usr/local/include
#LIBS += -L/usr/local/lib

# Driver interface for no driver (e.g., RADIUS server only)
#CONFIG_DRIVER_NONE=y

# IEEE 802.11F/IAPP
CONFIG_IAPP=y

# WPA2/IEEE 802.11i RSN pre-authentication
CONFIG_RSN_PREAUTH=y

# PeerKey handshake for Station to Station Link (IEEE 802.11e DLS)
CONFIG_PEERKEY=y

# IEEE 802.11w (management frame protection)
# This version is an experimental implementation based on IEEE 802.11w/D1.0
# draft and is subject to change since the standard has not yet been finalized.
# Driver support is also needed for IEEE 802.11w.
#CONFIG_IEEE80211W=y

# Integrated EAP server
CONFIG_EAP=y

# EAP-MD5 for the integrated EAP server
CONFIG_EAP_MD5=y

# EAP-TLS for the integrated EAP server
CONFIG_EAP_TLS=y

# EAP-MSCHAPv2 for the integrated EAP server
CONFIG_EAP_MSCHAPV2=y

# EAP-PEAP for the integrated EAP server
CONFIG_EAP_PEAP=y

# EAP-GTC for the integrated EAP server
CONFIG_EAP_GTC=y

# EAP-TTLS for the integrated EAP server
CONFIG_EAP_TTLS=y

# EAP-SIM for the integrated EAP server
#CONFIG_EAP_SIM=y

# EAP-AKA for the integrated EAP server
#CONFIG_EAP_AKA=y

# EAP-AKA' for the integrated EAP server
# This requires CONFIG_EAP_AKA to be enabled, too.
#CONFIG_EAP_AKA_PRIME=y

# EAP-PAX for the integrated EAP server
#CONFIG_EAP_PAX=y

# EAP-PSK for the integrated EAP server (this is _not_ needed for WPA-PSK)
#CONFIG_EAP_PSK=y

# EAP-SAKE for the integrated EAP server
#CONFIG_EAP_SAKE=y

# EAP-GPSK for the integrated EAP server
#CONFIG_EAP_GPSK=y
# Include support for optional SHA256 cipher suite in EAP-GPSK
#CONFIG_EAP_GPSK_SHA256=y

# EAP-FAST for the integrated EAP server
# Note: Default OpenSSL package does not include support for all the
# functionality needed for EAP-FAST. If EAP-FAST is enabled with OpenSSL,
# the OpenSSL library must be patched (openssl-0.9.9-session-ticket.patch)
# to add the needed functions.
#CONFIG_EAP_FAST=y

# Wi-Fi Protected Setup (WPS)
CONFIG_WPS=y
CONFIG_WPS2=y
# Enable UPnP support for external WPS Registrars
#CONFIG_WPS_UPNP=y

# EAP-IKEv2
#CONFIG_EAP_IKEV2=y

# Trusted Network Connect (EAP-TNC)
#CONFIG_EAP_TNC=y

# PKCS#12 (PFX) support (used to read private key and certificate file from
# a file that usually has extension .p12 or .pfx)
CONFIG_PKCS12=y

# RADIUS authentication server. This provides access to the integrated EAP
# server from external hosts using RADIUS.
#CONFIG_RADIUS_SERVER=y

# Build IPv6 support for RADIUS operations
CONFIG_IPV6=y

# IEEE Std 802.11r-2008 (Fast BSS Transition)
CONFIG_IEEE80211R=y

# Use the hostapd's IEEE 802.11 authentication (ACL), but without
# the IEEE 802.11 Management capability (e.g. FreeBSD/net80211)
#CONFIG_DRIVER_RADIUS_ACL=y

# IEEE 802.11n (High Throughput) support
CONFIG_IEEE80211N=y

# IEEE 802.11ac (Very High Throughput) support
CONFIG_IEEE80211AC=y

# Remove debugging code that is printing out debug messages to stdout.
# This can be used to reduce the size of the hostapd considerably if debugging
# code is not needed.
#CONFIG_NO_STDOUT_DEBUG=y

# Remove support for RADIUS accounting
#CONFIG_NO_ACCOUNTING=y

# Remove support for RADIUS
#CONFIG_NO_RADIUS=y

# Remove support for VLANs
#CONFIG_NO_VLAN=y

CONFIG_TLS=internal
CONFIG_INTERNAL_LIBTOMMATH=y
CONFIG_INTERNAL_AES=y
NEED_AES_DEC=y

CONFIG_NO_RANDOM_POOL=y
CONFIG_NO_DUMP_STATE=y

CONFIG_WPS=y
CONFIG_FULL_DYNAMIC_VLAN=y

CONFIG_UBUS=y
# Example hostapd build time configuration
#
# This file lists the configuration options that are used when building the
# hostapd binary. All lines starting with # are ignored. Configuration option
# lines must be commented out complete, if they are not to be included, i.e.,
# just setting VARIABLE=n is not disabling that variable.
#
# This file is included in Makefile, so variables like CFLAGS and LIBS can also
# be modified from here. In most cass, these lines should use += in order not
# to override previous values of the variables.

# Driver interface for Host AP driver
CONFIG_DRIVER_HOSTAP=y

# Driver interface for wired authenticator
CONFIG_DRIVER_WIRED=y

# Driver interface for Prism54 driver
#CONFIG_DRIVER_PRISM54=y

# Driver interface for drivers using the nl80211 kernel interface
CONFIG_DRIVER_NL80211=y
# driver_nl80211.c requires a rather new libnl (version 1.1) which may not be
# shipped with your distribution yet. If that is the case, you need to build
# newer libnl version and point the hostapd build to use it.
#LIBNL=/usr/src/libnl
#CFLAGS += -I$(LIBNL)/include
#LIBS += -L$(LIBNL)/lib

# Driver interface for FreeBSD net80211 layer (e.g., Atheros driver)
#CONFIG_DRIVER_BSD=y
#CFLAGS += -I/usr/local/include
#LIBS += -L/usr/local/lib

# Driver interface for no driver (e.g., RADIUS server only)
#CONFIG_DRIVER_NONE=y

# IEEE 802.11F/IAPP
# CONFIG_IAPP=y

# WPA2/IEEE 802.11i RSN pre-authentication
CONFIG_RSN_PREAUTH=y

# PeerKey handshake for Station to Station Link (IEEE 802.11e DLS)
CONFIG_PEERKEY=y

# IEEE 802.11w (management frame protection)
# This version is an experimental implementation based on IEEE 802.11w/D1.0
# draft and is subject to change since the standard has not yet been finalized.
# Driver support is also needed for IEEE 802.11w.
#CONFIG_IEEE80211W=y

# Integrated EAP server
#CONFIG_EAP=y

# EAP-MD5 for the integrated EAP server
#CONFIG_EAP_MD5=y

# EAP-TLS for the integrated EAP server
#CONFIG_EAP_TLS=y

# EAP-MSCHAPv2 for the integrated EAP server
#CONFIG_EAP_MSCHAPV2=y

# EAP-PEAP for the integrated EAP server
#CONFIG_EAP_PEAP=y

# EAP-GTC for the integrated EAP server
#CONFIG_EAP_GTC=y

# EAP-TTLS for the integrated EAP server
#CONFIG_EAP_TTLS=y

# EAP-SIM for the integrated EAP server
#CONFIG_EAP_SIM=y

# EAP-AKA for the integrated EAP server
#CONFIG_EAP_AKA=y

# EAP-AKA' for the integrated EAP server
# This requires CONFIG_EAP_AKA to be enabled, too.
#CONFIG_EAP_AKA_PRIME=y

# EAP-PAX for the integrated EAP server
#CONFIG_EAP_PAX=y

# EAP-PSK for the integrated EAP server (this is _not_ needed for WPA-PSK)
#CONFIG_EAP_PSK=y

# EAP-SAKE for the integrated EAP server
#CONFIG_EAP_SAKE=y

# EAP-GPSK for the integrated EAP server
#CONFIG_EAP_GPSK=y
# Include support for optional SHA256 cipher suite in EAP-GPSK
#CONFIG_EAP_GPSK_SHA256=y

# EAP-FAST for the integrated EAP server
# Note: Default OpenSSL package does not include support for all the
# functionality needed for EAP-FAST. If EAP-FAST is enabled with OpenSSL,
# the OpenSSL library must be patched (openssl-0.9.9-session-ticket.patch)
# to add the needed functions.
#CONFIG_EAP_FAST=y

# Wi-Fi Protected Setup (WPS)
#CONFIG_WPS=y
# Enable UPnP support for external WPS Registrars
#CONFIG_WPS_UPNP=y

# EAP-IKEv2
#CONFIG_EAP_IKEV2=y

# Trusted Network Connect (EAP-TNC)
#CONFIG_EAP_TNC=y

# PKCS#12 (PFX) support (used to read private key and certificate file from
# a file that usually has extension .p12 or .pfx)
#CONFIG_PKCS12=y

# RADIUS authentication server. This provides access to the integrated EAP
# server from external hosts using RADIUS.
#CONFIG_RADIUS_SERVER=y

# Build IPv6 support for RADIUS operations
#CONFIG_IPV6=y

# IEEE Std 802.11r-2008 (Fast BSS Transition)
#CONFIG_IEEE80211R=y

# Use the hostapd's IEEE 802.11 authentication (ACL), but without
# the IEEE 802.11 Management capability (e.g. FreeBSD/net80211)
#CONFIG_DRIVER_RADIUS_ACL=y

# IEEE 802.11n (High Throughput) support
CONFIG_IEEE80211N=y

# IEEE 802.11ac (Very High Throughput) support
CONFIG_IEEE80211AC=y

# Remove debugging code that is printing out debug messages to stdout.
# This can be used to reduce the size of the hostapd considerably if debugging
# code is not needed.
#CONFIG_NO_STDOUT_DEBUG=y

# Remove support for RADIUS accounting
CONFIG_NO_ACCOUNTING=y

# Remove support for RADIUS
CONFIG_NO_RADIUS=y

# Remove support for VLANs
#CONFIG_NO_VLAN=y

CONFIG_TLS=internal

CONFIG_NO_RANDOM_POOL=y
CONFIG_NO_DUMP_STATE=y

CONFIG_UBUS=y
config mjpg-streamer 'core'
	option enabled '0'
	option input 'uvc'
	option output 'http'
	option device '/dev/video0'
	option resolution '640x480'
	option yuv '0'
	option quality '80'
	option fps '5'
	option led 'auto'
	option www '/www/webcam'
	option port '8080'
	option username 'openwrt'
	option password 'openwrt'
  config kismet_server
    option enabled 0
    config dnscrypt-proxy
	option address '127.0.0.1'
	option port '5353'
	# option resolver 'opendns'
	# option resolvers_list '/usr/share/dnscrypt-proxy/dnscrypt-resolvers.csv'
  # Uncomment the stanza you want, and make sure to comment out the others, especially duplicate options.

#Arguments and defaults are as follows
config shairport-sync main
#       option name 'Shairport Sync' 		#default name, "Shairport Sync on %d"
#       option device default        		#default soundcard, volume control by software
						#(Troubleshooting hint: make sure the soundcard's volume is turned up fully -- use alsamixer or amixer)
#       option airplaylatency 88200
#       option ituneslatency 99400
#       option port 5000
#       option stuffing basic 			#options are 'basic' or 'soxr' if shairport-sync was compiled with soxr support
#       option awaitactioncompletion false 	#[don't] wait until beforeaction or afteraction completes
#       option beforeaction <action> 		#action must be a fully qualified program with no arguments. Default no action.
#       option afteraction <action> 		#action must be a fully qualified program with no arguments. Default no action.
#       option devicetype <devicetype>
#       option volumecontrolname <name>

#Here are some sample stanzas:

#For Raspberry Pi using the built-in soundcard for the headphone jack
#       option device 'hw:0'
#       option devicetype hardware
#       option volumecontrolname Master

#For Raspberry Pi with the "3D Sound" USB Soundcard
#        option name 'Pi'
#        option device 'hw:1'
#        option devicetype hardware
#        option volumecontrolname Speaker

#For Raspberry Pi with the first generation iMic or the Topping TP30 Class T Digital Mini Amplifier
#        option name 'Kitchen'
#        option device 'hw:1'
#        option devicetype hardware
#        option volumecontrolname PCM
config "client1"
  option disabled 0
  option username 'nobody'
  option groupname 'nogroup'
#  option chroot "/var/run/uanytun"

#  option interface '<ip-address>'
#  option port '4444'
#  option sender_id '1'

#  option dev 'anytun0'
  option type 'tun'
  option ifconfig '192.168.123.1/24'
#  option post-up-script '/etc/uanytun/client1-post-up.sh'

  option remote_host 'example.com'
  option remote_port '4444'

  option window_size 0
  option mux 1

  option log 'syslog:3,anytun-client1,daemon'


config "client2"
  option disabled 1
  option username 'nobody'
  option groupname 'nogroup'

  option type 'tun'
  option ifconfig '192.168.123.2/24'

  option remote_host 'example.com'
  option remote_port '4444'

  option window_size 0
  option mux 2

  option log 'syslog:3,anytun-client2,daemon'


config "client3"
  option disabled 1
  option username 'nobody'
  option groupname 'nogroup'

  option type 'tun'
  option ifconfig '192.168.123.3/24'

  option remote_host 'example.com'
  option remote_port '4444'

  option window_size 0
  option mux 3

  option log 'syslog:3,anytun-client3,daemon'


config "p2p-a"
  option disabled 1
  option username 'nobody'
  option groupname 'nogroup'

  option type 'tun'
  option ifconfig '192.168.223.1/24'

  option remote_host 'p2p-b.example.com'
  option remote_port '4444'

  option window_size 0

  option log 'syslog:3,anytun-p2p-a,daemon'


config "p2p-b"
  option disabled 1
  option username 'nobody'
  option groupname 'nogroup'

  option type 'tun'
  option ifconfig '192.168.223.2/24'

  option remote_host 'p2p-a.example.com'
  option remote_port '4444'

  option window_size 0

  option log 'syslog:3,anytun-p2p-b,daemon'
  config bandwidthd
	option dev	br-lan
	option subnets		"192.168.1.0/24"
	option skip_intervals	0
	option graph_cutoff	1024
	option promiscuous	true
	option output_cdf	false
	option recover_cdf	false
	option filter		ip
	option graph		true
	option meta_refresh	150
	option disabled_pgsql_connect_string	"user = postgres dbname = bandwidthd host = 192.168.1.1"
	option disabled_sensor_id	"openwrt.mydomain.domain"
  # Example wpa_supplicant build time configuration
#
# This file lists the configuration options that are used when building the
# hostapd binary. All lines starting with # are ignored. Configuration option
# lines must be commented out complete, if they are not to be included, i.e.,
# just setting VARIABLE=n is not disabling that variable.
#
# This file is included in Makefile, so variables like CFLAGS and LIBS can also
# be modified from here. In most cases, these lines should use += in order not
# to override previous values of the variables.


# Uncomment following two lines and fix the paths if you have installed OpenSSL
# or GnuTLS in non-default location
#CFLAGS += -I/usr/local/openssl/include
#LIBS += -L/usr/local/openssl/lib

# Some Red Hat versions seem to include kerberos header files from OpenSSL, but
# the kerberos files are not in the default include path. Following line can be
# used to fix build issues on such systems (krb5.h not found).
#CFLAGS += -I/usr/include/kerberos

# Example configuration for various cross-compilation platforms

#### sveasoft (e.g., for Linksys WRT54G) ######################################
#CC=mipsel-uclibc-gcc
#CC=/opt/brcm/hndtools-mipsel-uclibc/bin/mipsel-uclibc-gcc
#CFLAGS += -Os
#CPPFLAGS += -I../src/include -I../../src/router/openssl/include
#LIBS += -L/opt/brcm/hndtools-mipsel-uclibc-0.9.19/lib -lssl
###############################################################################

#### openwrt (e.g., for Linksys WRT54G) #######################################
#CC=mipsel-uclibc-gcc
#CC=/opt/brcm/hndtools-mipsel-uclibc/bin/mipsel-uclibc-gcc
#CFLAGS += -Os
#CPPFLAGS=-I../src/include -I../openssl-0.9.7d/include \
#	-I../WRT54GS/release/src/include
#LIBS = -lssl
###############################################################################


# Driver interface for Host AP driver
CONFIG_DRIVER_HOSTAP=y

# Driver interface for Agere driver
#CONFIG_DRIVER_HERMES=y
# Change include directories to match with the local setup
#CFLAGS += -I../../hcf -I../../include -I../../include/hcf
#CFLAGS += -I../../include/wireless

# Driver interface for ndiswrapper
# Deprecated; use CONFIG_DRIVER_WEXT=y instead.
#CONFIG_DRIVER_NDISWRAPPER=y

# Driver interface for Atmel driver
# CONFIG_DRIVER_ATMEL=y

# Driver interface for old Broadcom driver
# Please note that the newer Broadcom driver ("hybrid Linux driver") supports
# Linux wireless extensions and does not need (or even work) with the old
# driver wrapper. Use CONFIG_DRIVER_WEXT=y with that driver.
#CONFIG_DRIVER_BROADCOM=y
# Example path for wlioctl.h; change to match your configuration
#CFLAGS += -I/opt/WRT54GS/release/src/include

# Driver interface for Intel ipw2100/2200 driver
# Deprecated; use CONFIG_DRIVER_WEXT=y instead.
#CONFIG_DRIVER_IPW=y

# Driver interface for Ralink driver
#CONFIG_DRIVER_RALINK=y

# Driver interface for generic Linux wireless extensions
CONFIG_DRIVER_WEXT=y

# Driver interface for Linux drivers using the nl80211 kernel interface
CONFIG_DRIVER_NL80211=y

# Driver interface for FreeBSD net80211 layer (e.g., Atheros driver)
#CONFIG_DRIVER_BSD=y
#CFLAGS += -I/usr/local/include
#LIBS += -L/usr/local/lib
#LIBS_p += -L/usr/local/lib
#LIBS_c += -L/usr/local/lib

# Driver interface for Windows NDIS
#CONFIG_DRIVER_NDIS=y
#CFLAGS += -I/usr/include/w32api/ddk
#LIBS += -L/usr/local/lib
# For native build using mingw
#CONFIG_NATIVE_WINDOWS=y
# Additional directories for cross-compilation on Linux host for mingw target
#CFLAGS += -I/opt/mingw/mingw32/include/ddk
#LIBS += -L/opt/mingw/mingw32/lib
#CC=mingw32-gcc
# By default, driver_ndis uses WinPcap for low-level operations. This can be
# replaced with the following option which replaces WinPcap calls with NDISUIO.
# However, this requires that WZC is disabled (net stop wzcsvc) before starting
# wpa_supplicant.
# CONFIG_USE_NDISUIO=y

# Driver interface for development testing
#CONFIG_DRIVER_TEST=y

# Include client MLME (management frame processing) for test driver
# This can be used to test MLME operations in hostapd with the test interface.
# space.
#CONFIG_CLIENT_MLME=y

# Driver interface for wired Ethernet drivers
CONFIG_DRIVER_WIRED=y

# Driver interface for the Broadcom RoboSwitch family
#CONFIG_DRIVER_ROBOSWITCH=y

# Driver interface for no driver (e.g., WPS ER only)
#CONFIG_DRIVER_NONE=y

# Enable IEEE 802.1X Supplicant (automatically included if any EAP method is
# included)
CONFIG_IEEE8021X_EAPOL=y

# EAP-MD5
CONFIG_EAP_MD5=y

# EAP-MSCHAPv2
CONFIG_EAP_MSCHAPV2=y

# EAP-TLS
CONFIG_EAP_TLS=y

# EAL-PEAP
CONFIG_EAP_PEAP=y

# EAP-TTLS
CONFIG_EAP_TTLS=y

# EAP-FAST
# Note: Default OpenSSL package does not include support for all the
# functionality needed for EAP-FAST. If EAP-FAST is enabled with OpenSSL,
# the OpenSSL library must be patched (openssl-0.9.8d-tls-extensions.patch)
# to add the needed functions.
#CONFIG_EAP_FAST=y

# EAP-GTC
CONFIG_EAP_GTC=y

# EAP-OTP
CONFIG_EAP_OTP=y

# EAP-SIM (enable CONFIG_PCSC, if EAP-SIM is used)
#CONFIG_EAP_SIM=y

# EAP-PSK (experimental; this is _not_ needed for WPA-PSK)
#CONFIG_EAP_PSK=y

# EAP-PAX
#CONFIG_EAP_PAX=y

# LEAP
CONFIG_EAP_LEAP=y

# EAP-AKA (enable CONFIG_PCSC, if EAP-AKA is used)
#CONFIG_EAP_AKA=y

# EAP-AKA' (enable CONFIG_PCSC, if EAP-AKA' is used).
# This requires CONFIG_EAP_AKA to be enabled, too.
#CONFIG_EAP_AKA_PRIME=y

# Enable USIM simulator (Milenage) for EAP-AKA
#CONFIG_USIM_SIMULATOR=y

# EAP-SAKE
#CONFIG_EAP_SAKE=y

# EAP-GPSK
#CONFIG_EAP_GPSK=y
# Include support for optional SHA256 cipher suite in EAP-GPSK
#CONFIG_EAP_GPSK_SHA256=y

# EAP-TNC and related Trusted Network Connect support (experimental)
#CONFIG_EAP_TNC=y

# Wi-Fi Protected Setup (WPS)
CONFIG_WPS=y

# EAP-IKEv2
#CONFIG_EAP_IKEV2=y

# PKCS#12 (PFX) support (used to read private key and certificate file from
# a file that usually has extension .p12 or .pfx)
CONFIG_PKCS12=y

# Smartcard support (i.e., private key on a smartcard), e.g., with openssl
# engine.
CONFIG_SMARTCARD=y

# PC/SC interface for smartcards (USIM, GSM SIM)
# Enable this if EAP-SIM or EAP-AKA is included
#CONFIG_PCSC=y

# Development testing
#CONFIG_EAPOL_TEST=y

# Select control interface backend for external programs, e.g, wpa_cli:
# unix = UNIX domain sockets (default for Linux/*BSD)
# udp = UDP sockets using localhost (127.0.0.1)
# named_pipe = Windows Named Pipe (default for Windows)
# y = use default (backwards compatibility)
# If this option is commented out, control interface is not included in the
# build.
CONFIG_CTRL_IFACE=y

# Include support for GNU Readline and History Libraries in wpa_cli.
# When building a wpa_cli binary for distribution, please note that these
# libraries are licensed under GPL and as such, BSD license may not apply for
# the resulting binary.
#CONFIG_READLINE=y

# Remove debugging code that is printing out debug message to stdout.
# This can be used to reduce the size of the wpa_supplicant considerably
# if debugging code is not needed. The size reduction can be around 35%
# (e.g., 90 kB).
#CONFIG_NO_STDOUT_DEBUG=y

# Remove WPA support, e.g., for wired-only IEEE 802.1X supplicant, to save
# 35-50 kB in code size.
#CONFIG_NO_WPA=y

# Remove WPA2 support. This allows WPA to be used, but removes WPA2 code to
# save about 1 kB in code size when building only WPA-Personal (no EAP support)
# or 6 kB if building for WPA-Enterprise.
#CONFIG_NO_WPA2=y

# Remove IEEE 802.11i/WPA-Personal ASCII passphrase support
# This option can be used to reduce code size by removing support for
# converting ASCII passphrases into PSK. If this functionality is removed, the
# PSK can only be configured as the 64-octet hexstring (e.g., from
# wpa_passphrase). This saves about 0.5 kB in code size.
#CONFIG_NO_WPA_PASSPHRASE=y

# Disable scan result processing (ap_mode=1) to save code size by about 1 kB.
# This can be used if ap_scan=1 mode is never enabled.
#CONFIG_NO_SCAN_PROCESSING=y

# Select configuration backend:
# file = text file (e.g., wpa_supplicant.conf; note: the configuration file
#	path is given on command line, not here; this option is just used to
#	select the backend that allows configuration files to be used)
# winreg = Windows registry (see win_example.reg for an example)
CONFIG_BACKEND=file

# Remove configuration write functionality (i.e., to allow the configuration
# file to be updated based on runtime configuration changes). The runtime
# configuration can still be changed, the changes are just not going to be
# persistent over restarts. This option can be used to reduce code size by
# about 3.5 kB.
#CONFIG_NO_CONFIG_WRITE=y

# Remove support for configuration blobs to reduce code size by about 1.5 kB.
#CONFIG_NO_CONFIG_BLOBS=y

# Select program entry point implementation:
# main = UNIX/POSIX like main() function (default)
# main_winsvc = Windows service (read parameters from registry)
# main_none = Very basic example (development use only)
#CONFIG_MAIN=main

# Select wrapper for operatins system and C library specific functions
# unix = UNIX/POSIX like systems (default)
# win32 = Windows systems
# none = Empty template
#CONFIG_OS=unix

# Select event loop implementation
# eloop = select() loop (default)
# eloop_win = Windows events and WaitForMultipleObject() loop
# eloop_none = Empty template
#CONFIG_ELOOP=eloop

# Select layer 2 packet implementation
# linux = Linux packet socket (default)
# pcap = libpcap/libdnet/WinPcap
# freebsd = FreeBSD libpcap
# winpcap = WinPcap with receive thread
# ndis = Windows NDISUIO (note: requires CONFIG_USE_NDISUIO=y)
# none = Empty template
#CONFIG_L2_PACKET=linux

# PeerKey handshake for Station to Station Link (IEEE 802.11e DLS)
CONFIG_PEERKEY=y

# IEEE 802.11w (management frame protection)
# This version is an experimental implementation based on IEEE 802.11w/D1.0
# draft and is subject to change since the standard has not yet been finalized.
# Driver support is also needed for IEEE 802.11w.
CONFIG_IEEE80211W=y

# Select TLS implementation
# openssl = OpenSSL (default)
# gnutls = GnuTLS (needed for TLS/IA, see also CONFIG_GNUTLS_EXTRA)
# internal = Internal TLSv1 implementation (experimental)
# none = Empty template
CONFIG_TLS=internal

# Whether to enable TLS/IA support, which is required for EAP-TTLSv1.
# You need CONFIG_TLS=gnutls for this to have any effect. Please note that
# even though the core GnuTLS library is released under LGPL, this extra
# library uses GPL and as such, the terms of GPL apply to the combination
# of wpa_supplicant and GnuTLS if this option is enabled. BSD license may not
# apply for distribution of the resulting binary.
#CONFIG_GNUTLS_EXTRA=y

# If CONFIG_TLS=internal is used, additional library and include paths are
# needed for LibTomMath. Alternatively, an integrated, minimal version of
# LibTomMath can be used. See beginning of libtommath.c for details on benefits
# and drawbacks of this option.
CONFIG_INTERNAL_LIBTOMMATH=y
#ifndef CONFIG_INTERNAL_LIBTOMMATH
#LTM_PATH=/usr/src/libtommath-0.39
#CFLAGS += -I$(LTM_PATH)
#LIBS += -L$(LTM_PATH)
#LIBS_p += -L$(LTM_PATH)
#endif
# At the cost of about 4 kB of additional binary size, the internal LibTomMath
# can be configured to include faster routines for exptmod, sqr, and div to
# speed up DH and RSA calculation considerably
CONFIG_INTERNAL_LIBTOMMATH_FAST=y

# Include NDIS event processing through WMI into wpa_supplicant/wpasvc.
# This is only for Windows builds and requires WMI-related header files and
# WbemUuid.Lib from Platform SDK even when building with MinGW.
#CONFIG_NDIS_EVENTS_INTEGRATED=y
#PLATFORMSDKLIB="/opt/Program Files/Microsoft Platform SDK/Lib"

# Add support for old DBus control interface
# (fi.epitest.hostap.WPASupplicant)
#CONFIG_CTRL_IFACE_DBUS=y

# Add support for new DBus control interface
# (fi.w1.hostap.wpa_supplicant1)
#CONFIG_CTRL_IFACE_DBUS_NEW=y

# Add introspection support for new DBus control interface
#CONFIG_CTRL_IFACE_DBUS_INTRO=y

# Add support for loading EAP methods dynamically as shared libraries.
# When this option is enabled, each EAP method can be either included
# statically (CONFIG_EAP_<method>=y) or dynamically (CONFIG_EAP_<method>=dyn).
# Dynamic EAP methods are build as shared objects (eap_*.so) and they need to
# be loaded in the beginning of the wpa_supplicant configuration file
# (see load_dynamic_eap parameter in the example file) before being used in
# the network blocks.
#
# Note that some shared parts of EAP methods are included in the main program
# and in order to be able to use dynamic EAP methods using these parts, the
# main program must have been build with the EAP method enabled (=y or =dyn).
# This means that EAP-TLS/PEAP/TTLS/FAST cannot be added as dynamic libraries
# unless at least one of them was included in the main build to force inclusion
# of the shared code. Similarly, at least one of EAP-SIM/AKA must be included
# in the main build to be able to load these methods dynamically.
#
# Please also note that using dynamic libraries will increase the total binary
# size. Thus, it may not be the best option for targets that have limited
# amount of memory/flash.
#CONFIG_DYNAMIC_EAP_METHODS=y

# IEEE Std 802.11r-2008 (Fast BSS Transition)
#CONFIG_IEEE80211R=y

# Add support for writing debug log to a file (/tmp/wpa_supplicant-log-#.txt)
#CONFIG_DEBUG_FILE=y

# Enable privilege separation (see README 'Privilege separation' for details)
#CONFIG_PRIVSEP=y

# Enable mitigation against certain attacks against TKIP by delaying Michael
# MIC error reports by a random amount of time between 0 and 60 seconds
#CONFIG_DELAYED_MIC_ERROR_REPORT=y

# Enable tracing code for developer debugging
# This tracks use of memory allocations and other registrations and reports
# incorrect use with a backtrace of call (or allocation) location.
#CONFIG_WPA_TRACE=y
# For BSD, comment out these.
#LIBS += -lexecinfo
#LIBS_p += -lexecinfo
#LIBS_c += -lexecinfo

# Use libbfd to get more details for developer debugging
# This enables use of libbfd to get more detailed symbols for the backtraces
# generated by CONFIG_WPA_TRACE=y.
#CONFIG_WPA_TRACE_BFD=y
# For BSD, comment out these.
#LIBS += -lbfd -liberty -lz
#LIBS_p += -lbfd -liberty -lz
#LIBS_c += -lbfd -liberty -lz

CONFIG_NO_RANDOM_POOL=y
NEED_80211_COMMON=y

CONFIG_IBSS_RSN=y

CONFIG_P2P=y
CONFIG_AP=y
# Example wpa_supplicant build time configuration
#
# This file lists the configuration options that are used when building the
# hostapd binary. All lines starting with # are ignored. Configuration option
# lines must be commented out complete, if they are not to be included, i.e.,
# just setting VARIABLE=n is not disabling that variable.
#
# This file is included in Makefile, so variables like CFLAGS and LIBS can also
# be modified from here. In most cases, these lines should use += in order not
# to override previous values of the variables.


# Uncomment following two lines and fix the paths if you have installed OpenSSL
# or GnuTLS in non-default location
#CFLAGS += -I/usr/local/openssl/include
#LIBS += -L/usr/local/openssl/lib

# Some Red Hat versions seem to include kerberos header files from OpenSSL, but
# the kerberos files are not in the default include path. Following line can be
# used to fix build issues on such systems (krb5.h not found).
#CFLAGS += -I/usr/include/kerberos

# Example configuration for various cross-compilation platforms

#### sveasoft (e.g., for Linksys WRT54G) ######################################
#CC=mipsel-uclibc-gcc
#CC=/opt/brcm/hndtools-mipsel-uclibc/bin/mipsel-uclibc-gcc
#CFLAGS += -Os
#CPPFLAGS += -I../src/include -I../../src/router/openssl/include
#LIBS += -L/opt/brcm/hndtools-mipsel-uclibc-0.9.19/lib -lssl
###############################################################################

#### openwrt (e.g., for Linksys WRT54G) #######################################
#CC=mipsel-uclibc-gcc
#CC=/opt/brcm/hndtools-mipsel-uclibc/bin/mipsel-uclibc-gcc
#CFLAGS += -Os
#CPPFLAGS=-I../src/include -I../openssl-0.9.7d/include \
#	-I../WRT54GS/release/src/include
#LIBS = -lssl
###############################################################################


# Driver interface for Host AP driver
CONFIG_DRIVER_HOSTAP=y

# Driver interface for Agere driver
#CONFIG_DRIVER_HERMES=y
# Change include directories to match with the local setup
#CFLAGS += -I../../hcf -I../../include -I../../include/hcf
#CFLAGS += -I../../include/wireless

# Driver interface for ndiswrapper
# Deprecated; use CONFIG_DRIVER_WEXT=y instead.
#CONFIG_DRIVER_NDISWRAPPER=y

# Driver interface for Atmel driver
# CONFIG_DRIVER_ATMEL=y

# Driver interface for old Broadcom driver
# Please note that the newer Broadcom driver ("hybrid Linux driver") supports
# Linux wireless extensions and does not need (or even work) with the old
# driver wrapper. Use CONFIG_DRIVER_WEXT=y with that driver.
#CONFIG_DRIVER_BROADCOM=y
# Example path for wlioctl.h; change to match your configuration
#CFLAGS += -I/opt/WRT54GS/release/src/include

# Driver interface for Intel ipw2100/2200 driver
# Deprecated; use CONFIG_DRIVER_WEXT=y instead.
#CONFIG_DRIVER_IPW=y

# Driver interface for Ralink driver
#CONFIG_DRIVER_RALINK=y

# Driver interface for generic Linux wireless extensions
CONFIG_DRIVER_WEXT=y

# Driver interface for Linux drivers using the nl80211 kernel interface
CONFIG_DRIVER_NL80211=y

# Driver interface for FreeBSD net80211 layer (e.g., Atheros driver)
#CONFIG_DRIVER_BSD=y
#CFLAGS += -I/usr/local/include
#LIBS += -L/usr/local/lib
#LIBS_p += -L/usr/local/lib
#LIBS_c += -L/usr/local/lib

# Driver interface for Windows NDIS
#CONFIG_DRIVER_NDIS=y
#CFLAGS += -I/usr/include/w32api/ddk
#LIBS += -L/usr/local/lib
# For native build using mingw
#CONFIG_NATIVE_WINDOWS=y
# Additional directories for cross-compilation on Linux host for mingw target
#CFLAGS += -I/opt/mingw/mingw32/include/ddk
#LIBS += -L/opt/mingw/mingw32/lib
#CC=mingw32-gcc
# By default, driver_ndis uses WinPcap for low-level operations. This can be
# replaced with the following option which replaces WinPcap calls with NDISUIO.
# However, this requires that WZC is disabled (net stop wzcsvc) before starting
# wpa_supplicant.
# CONFIG_USE_NDISUIO=y

# Driver interface for development testing
#CONFIG_DRIVER_TEST=y

# Include client MLME (management frame processing) for test driver
# This can be used to test MLME operations in hostapd with the test interface.
# space.
#CONFIG_CLIENT_MLME=y

# Driver interface for wired Ethernet drivers
CONFIG_DRIVER_WIRED=y

# Driver interface for the Broadcom RoboSwitch family
#CONFIG_DRIVER_ROBOSWITCH=y

# Driver interface for no driver (e.g., WPS ER only)
#CONFIG_DRIVER_NONE=y

# Enable IEEE 802.1X Supplicant (automatically included if any EAP method is
# included)
CONFIG_IEEE8021X_EAPOL=y

# EAP-MD5
CONFIG_EAP_MD5=y

# EAP-MSCHAPv2
CONFIG_EAP_MSCHAPV2=y

# EAP-TLS
CONFIG_EAP_TLS=y

# EAL-PEAP
CONFIG_EAP_PEAP=y

# EAP-TTLS
CONFIG_EAP_TTLS=y

# EAP-FAST
# Note: Default OpenSSL package does not include support for all the
# functionality needed for EAP-FAST. If EAP-FAST is enabled with OpenSSL,
# the OpenSSL library must be patched (openssl-0.9.8d-tls-extensions.patch)
# to add the needed functions.
#CONFIG_EAP_FAST=y

# EAP-GTC
CONFIG_EAP_GTC=y

# EAP-OTP
CONFIG_EAP_OTP=y

# EAP-SIM (enable CONFIG_PCSC, if EAP-SIM is used)
#CONFIG_EAP_SIM=y

# EAP-PSK (experimental; this is _not_ needed for WPA-PSK)
#CONFIG_EAP_PSK=y

# EAP-PAX
#CONFIG_EAP_PAX=y

# LEAP
CONFIG_EAP_LEAP=y

# EAP-AKA (enable CONFIG_PCSC, if EAP-AKA is used)
#CONFIG_EAP_AKA=y

# EAP-AKA' (enable CONFIG_PCSC, if EAP-AKA' is used).
# This requires CONFIG_EAP_AKA to be enabled, too.
#CONFIG_EAP_AKA_PRIME=y

# Enable USIM simulator (Milenage) for EAP-AKA
#CONFIG_USIM_SIMULATOR=y

# EAP-SAKE
#CONFIG_EAP_SAKE=y

# EAP-GPSK
#CONFIG_EAP_GPSK=y
# Include support for optional SHA256 cipher suite in EAP-GPSK
#CONFIG_EAP_GPSK_SHA256=y

# EAP-TNC and related Trusted Network Connect support (experimental)
#CONFIG_EAP_TNC=y

# Wi-Fi Protected Setup (WPS)
CONFIG_WPS=y

# EAP-IKEv2
#CONFIG_EAP_IKEV2=y

# PKCS#12 (PFX) support (used to read private key and certificate file from
# a file that usually has extension .p12 or .pfx)
CONFIG_PKCS12=y

# Smartcard support (i.e., private key on a smartcard), e.g., with openssl
# engine.
CONFIG_SMARTCARD=y

# PC/SC interface for smartcards (USIM, GSM SIM)
# Enable this if EAP-SIM or EAP-AKA is included
#CONFIG_PCSC=y

# Development testing
#CONFIG_EAPOL_TEST=y

# Select control interface backend for external programs, e.g, wpa_cli:
# unix = UNIX domain sockets (default for Linux/*BSD)
# udp = UDP sockets using localhost (127.0.0.1)
# named_pipe = Windows Named Pipe (default for Windows)
# y = use default (backwards compatibility)
# If this option is commented out, control interface is not included in the
# build.
CONFIG_CTRL_IFACE=y

# Include support for GNU Readline and History Libraries in wpa_cli.
# When building a wpa_cli binary for distribution, please note that these
# libraries are licensed under GPL and as such, BSD license may not apply for
# the resulting binary.
#CONFIG_READLINE=y

# Remove debugging code that is printing out debug message to stdout.
# This can be used to reduce the size of the wpa_supplicant considerably
# if debugging code is not needed. The size reduction can be around 35%
# (e.g., 90 kB).
#CONFIG_NO_STDOUT_DEBUG=y

# Remove WPA support, e.g., for wired-only IEEE 802.1X supplicant, to save
# 35-50 kB in code size.
#CONFIG_NO_WPA=y

# Remove WPA2 support. This allows WPA to be used, but removes WPA2 code to
# save about 1 kB in code size when building only WPA-Personal (no EAP support)
# or 6 kB if building for WPA-Enterprise.
#CONFIG_NO_WPA2=y

# Remove IEEE 802.11i/WPA-Personal ASCII passphrase support
# This option can be used to reduce code size by removing support for
# converting ASCII passphrases into PSK. If this functionality is removed, the
# PSK can only be configured as the 64-octet hexstring (e.g., from
# wpa_passphrase). This saves about 0.5 kB in code size.
#CONFIG_NO_WPA_PASSPHRASE=y

# Disable scan result processing (ap_mode=1) to save code size by about 1 kB.
# This can be used if ap_scan=1 mode is never enabled.
#CONFIG_NO_SCAN_PROCESSING=y

# Select configuration backend:
# file = text file (e.g., wpa_supplicant.conf; note: the configuration file
#	path is given on command line, not here; this option is just used to
#	select the backend that allows configuration files to be used)
# winreg = Windows registry (see win_example.reg for an example)
CONFIG_BACKEND=file

# Remove configuration write functionality (i.e., to allow the configuration
# file to be updated based on runtime configuration changes). The runtime
# configuration can still be changed, the changes are just not going to be
# persistent over restarts. This option can be used to reduce code size by
# about 3.5 kB.
#CONFIG_NO_CONFIG_WRITE=y

# Remove support for configuration blobs to reduce code size by about 1.5 kB.
#CONFIG_NO_CONFIG_BLOBS=y

# Select program entry point implementation:
# main = UNIX/POSIX like main() function (default)
# main_winsvc = Windows service (read parameters from registry)
# main_none = Very basic example (development use only)
#CONFIG_MAIN=main

# Select wrapper for operatins system and C library specific functions
# unix = UNIX/POSIX like systems (default)
# win32 = Windows systems
# none = Empty template
#CONFIG_OS=unix

# Select event loop implementation
# eloop = select() loop (default)
# eloop_win = Windows events and WaitForMultipleObject() loop
# eloop_none = Empty template
#CONFIG_ELOOP=eloop

# Select layer 2 packet implementation
# linux = Linux packet socket (default)
# pcap = libpcap/libdnet/WinPcap
# freebsd = FreeBSD libpcap
# winpcap = WinPcap with receive thread
# ndis = Windows NDISUIO (note: requires CONFIG_USE_NDISUIO=y)
# none = Empty template
#CONFIG_L2_PACKET=linux

# PeerKey handshake for Station to Station Link (IEEE 802.11e DLS)
CONFIG_PEERKEY=y

# IEEE 802.11w (management frame protection)
# This version is an experimental implementation based on IEEE 802.11w/D1.0
# draft and is subject to change since the standard has not yet been finalized.
# Driver support is also needed for IEEE 802.11w.
CONFIG_IEEE80211W=y

# Select TLS implementation
# openssl = OpenSSL (default)
# gnutls = GnuTLS (needed for TLS/IA, see also CONFIG_GNUTLS_EXTRA)
# internal = Internal TLSv1 implementation (experimental)
# none = Empty template
CONFIG_TLS=internal

# Whether to enable TLS/IA support, which is required for EAP-TTLSv1.
# You need CONFIG_TLS=gnutls for this to have any effect. Please note that
# even though the core GnuTLS library is released under LGPL, this extra
# library uses GPL and as such, the terms of GPL apply to the combination
# of wpa_supplicant and GnuTLS if this option is enabled. BSD license may not
# apply for distribution of the resulting binary.
#CONFIG_GNUTLS_EXTRA=y

# If CONFIG_TLS=internal is used, additional library and include paths are
# needed for LibTomMath. Alternatively, an integrated, minimal version of
# LibTomMath can be used. See beginning of libtommath.c for details on benefits
# and drawbacks of this option.
CONFIG_INTERNAL_LIBTOMMATH=y
#ifndef CONFIG_INTERNAL_LIBTOMMATH
#LTM_PATH=/usr/src/libtommath-0.39
#CFLAGS += -I$(LTM_PATH)
#LIBS += -L$(LTM_PATH)
#LIBS_p += -L$(LTM_PATH)
#endif
# At the cost of about 4 kB of additional binary size, the internal LibTomMath
# can be configured to include faster routines for exptmod, sqr, and div to
# speed up DH and RSA calculation considerably
CONFIG_INTERNAL_LIBTOMMATH_FAST=y

# Include NDIS event processing through WMI into wpa_supplicant/wpasvc.
# This is only for Windows builds and requires WMI-related header files and
# WbemUuid.Lib from Platform SDK even when building with MinGW.
#CONFIG_NDIS_EVENTS_INTEGRATED=y
#PLATFORMSDKLIB="/opt/Program Files/Microsoft Platform SDK/Lib"

# Add support for old DBus control interface
# (fi.epitest.hostap.WPASupplicant)
#CONFIG_CTRL_IFACE_DBUS=y

# Add support for new DBus control interface
# (fi.w1.hostap.wpa_supplicant1)
#CONFIG_CTRL_IFACE_DBUS_NEW=y

# Add introspection support for new DBus control interface
#CONFIG_CTRL_IFACE_DBUS_INTRO=y

# Add support for loading EAP methods dynamically as shared libraries.
# When this option is enabled, each EAP method can be either included
# statically (CONFIG_EAP_<method>=y) or dynamically (CONFIG_EAP_<method>=dyn).
# Dynamic EAP methods are build as shared objects (eap_*.so) and they need to
# be loaded in the beginning of the wpa_supplicant configuration file
# (see load_dynamic_eap parameter in the example file) before being used in
# the network blocks.
#
# Note that some shared parts of EAP methods are included in the main program
# and in order to be able to use dynamic EAP methods using these parts, the
# main program must have been build with the EAP method enabled (=y or =dyn).
# This means that EAP-TLS/PEAP/TTLS/FAST cannot be added as dynamic libraries
# unless at least one of them was included in the main build to force inclusion
# of the shared code. Similarly, at least one of EAP-SIM/AKA must be included
# in the main build to be able to load these methods dynamically.
#
# Please also note that using dynamic libraries will increase the total binary
# size. Thus, it may not be the best option for targets that have limited
# amount of memory/flash.
#CONFIG_DYNAMIC_EAP_METHODS=y

# IEEE Std 802.11r-2008 (Fast BSS Transition)
#CONFIG_IEEE80211R=y

# Add support for writing debug log to a file (/tmp/wpa_supplicant-log-#.txt)
#CONFIG_DEBUG_FILE=y

# Enable privilege separation (see README 'Privilege separation' for details)
#CONFIG_PRIVSEP=y

# Enable mitigation against certain attacks against TKIP by delaying Michael
# MIC error reports by a random amount of time between 0 and 60 seconds
#CONFIG_DELAYED_MIC_ERROR_REPORT=y

# Enable tracing code for developer debugging
# This tracks use of memory allocations and other registrations and reports
# incorrect use with a backtrace of call (or allocation) location.
#CONFIG_WPA_TRACE=y
# For BSD, comment out these.
#LIBS += -lexecinfo
#LIBS_p += -lexecinfo
#LIBS_c += -lexecinfo

# Use libbfd to get more details for developer debugging
# This enables use of libbfd to get more detailed symbols for the backtraces
# generated by CONFIG_WPA_TRACE=y.
#CONFIG_WPA_TRACE_BFD=y
# For BSD, comment out these.
#LIBS += -lbfd -liberty -lz
#LIBS_p += -lbfd -liberty -lz
#LIBS_c += -lbfd -liberty -lz

CONFIG_NO_RANDOM_POOL=y
NEED_80211_COMMON=y

CONFIG_IBSS_RSN=y
# Example wpa_supplicant build time configuration
#
# This file lists the configuration options that are used when building the
# hostapd binary. All lines starting with # are ignored. Configuration option
# lines must be commented out complete, if they are not to be included, i.e.,
# just setting VARIABLE=n is not disabling that variable.
#
# This file is included in Makefile, so variables like CFLAGS and LIBS can also
# be modified from here. In most cases, these lines should use += in order not
# to override previous values of the variables.


# Uncomment following two lines and fix the paths if you have installed OpenSSL
# or GnuTLS in non-default location
#CFLAGS += -I/usr/local/openssl/include
#LIBS += -L/usr/local/openssl/lib

# Some Red Hat versions seem to include kerberos header files from OpenSSL, but
# the kerberos files are not in the default include path. Following line can be
# used to fix build issues on such systems (krb5.h not found).
#CFLAGS += -I/usr/include/kerberos

# Example configuration for various cross-compilation platforms

#### sveasoft (e.g., for Linksys WRT54G) ######################################
#CC=mipsel-uclibc-gcc
#CC=/opt/brcm/hndtools-mipsel-uclibc/bin/mipsel-uclibc-gcc
#CFLAGS += -Os
#CPPFLAGS += -I../src/include -I../../src/router/openssl/include
#LIBS += -L/opt/brcm/hndtools-mipsel-uclibc-0.9.19/lib -lssl
###############################################################################

#### openwrt (e.g., for Linksys WRT54G) #######################################
#CC=mipsel-uclibc-gcc
#CC=/opt/brcm/hndtools-mipsel-uclibc/bin/mipsel-uclibc-gcc
#CFLAGS += -Os
#CPPFLAGS=-I../src/include -I../openssl-0.9.7d/include \
#	-I../WRT54GS/release/src/include
#LIBS = -lssl
###############################################################################


# Driver interface for Host AP driver
CONFIG_DRIVER_HOSTAP=y

# Driver interface for Agere driver
#CONFIG_DRIVER_HERMES=y
# Change include directories to match with the local setup
#CFLAGS += -I../../hcf -I../../include -I../../include/hcf
#CFLAGS += -I../../include/wireless

# Driver interface for ndiswrapper
# Deprecated; use CONFIG_DRIVER_WEXT=y instead.
#CONFIG_DRIVER_NDISWRAPPER=y

# Driver interface for Atmel driver
# CONFIG_DRIVER_ATMEL=y

# Driver interface for old Broadcom driver
# Please note that the newer Broadcom driver ("hybrid Linux driver") supports
# Linux wireless extensions and does not need (or even work) with the old
# driver wrapper. Use CONFIG_DRIVER_WEXT=y with that driver.
#CONFIG_DRIVER_BROADCOM=y
# Example path for wlioctl.h; change to match your configuration
#CFLAGS += -I/opt/WRT54GS/release/src/include

# Driver interface for Intel ipw2100/2200 driver
# Deprecated; use CONFIG_DRIVER_WEXT=y instead.
#CONFIG_DRIVER_IPW=y

# Driver interface for Ralink driver
#CONFIG_DRIVER_RALINK=y

# Driver interface for generic Linux wireless extensions
CONFIG_DRIVER_WEXT=y

# Driver interface for Linux drivers using the nl80211 kernel interface
CONFIG_DRIVER_NL80211=y

# Driver interface for FreeBSD net80211 layer (e.g., Atheros driver)
#CONFIG_DRIVER_BSD=y
#CFLAGS += -I/usr/local/include
#LIBS += -L/usr/local/lib
#LIBS_p += -L/usr/local/lib
#LIBS_c += -L/usr/local/lib

# Driver interface for Windows NDIS
#CONFIG_DRIVER_NDIS=y
#CFLAGS += -I/usr/include/w32api/ddk
#LIBS += -L/usr/local/lib
# For native build using mingw
#CONFIG_NATIVE_WINDOWS=y
# Additional directories for cross-compilation on Linux host for mingw target
#CFLAGS += -I/opt/mingw/mingw32/include/ddk
#LIBS += -L/opt/mingw/mingw32/lib
#CC=mingw32-gcc
# By default, driver_ndis uses WinPcap for low-level operations. This can be
# replaced with the following option which replaces WinPcap calls with NDISUIO.
# However, this requires that WZC is disabled (net stop wzcsvc) before starting
# wpa_supplicant.
# CONFIG_USE_NDISUIO=y

# Driver interface for development testing
#CONFIG_DRIVER_TEST=y

# Include client MLME (management frame processing) for test driver
# This can be used to test MLME operations in hostapd with the test interface.
# space.
#CONFIG_CLIENT_MLME=y

# Driver interface for wired Ethernet drivers
CONFIG_DRIVER_WIRED=y

# Driver interface for the Broadcom RoboSwitch family
#CONFIG_DRIVER_ROBOSWITCH=y

# Driver interface for no driver (e.g., WPS ER only)
#CONFIG_DRIVER_NONE=y

# Enable IEEE 802.1X Supplicant (automatically included if any EAP method is
# included)
CONFIG_IEEE8021X_EAPOL=y

# EAP-MD5
CONFIG_EAP_MD5=y

# EAP-MSCHAPv2
CONFIG_EAP_MSCHAPV2=y

# EAP-TLS
CONFIG_EAP_TLS=y

# EAL-PEAP
CONFIG_EAP_PEAP=y

# EAP-TTLS
CONFIG_EAP_TTLS=y

# EAP-FAST
# Note: Default OpenSSL package does not include support for all the
# functionality needed for EAP-FAST. If EAP-FAST is enabled with OpenSSL,
# the OpenSSL library must be patched (openssl-0.9.8d-tls-extensions.patch)
# to add the needed functions.
#CONFIG_EAP_FAST=y

# EAP-GTC
CONFIG_EAP_GTC=y

# EAP-OTP
CONFIG_EAP_OTP=y

# EAP-SIM (enable CONFIG_PCSC, if EAP-SIM is used)
#CONFIG_EAP_SIM=y

# EAP-PSK (experimental; this is _not_ needed for WPA-PSK)
#CONFIG_EAP_PSK=y

# EAP-PAX
#CONFIG_EAP_PAX=y

# LEAP
CONFIG_EAP_LEAP=y

# EAP-AKA (enable CONFIG_PCSC, if EAP-AKA is used)
#CONFIG_EAP_AKA=y

# EAP-AKA' (enable CONFIG_PCSC, if EAP-AKA' is used).
# This requires CONFIG_EAP_AKA to be enabled, too.
#CONFIG_EAP_AKA_PRIME=y

# Enable USIM simulator (Milenage) for EAP-AKA
#CONFIG_USIM_SIMULATOR=y

# EAP-SAKE
#CONFIG_EAP_SAKE=y

# EAP-GPSK
#CONFIG_EAP_GPSK=y
# Include support for optional SHA256 cipher suite in EAP-GPSK
#CONFIG_EAP_GPSK_SHA256=y

# EAP-TNC and related Trusted Network Connect support (experimental)
#CONFIG_EAP_TNC=y

# Wi-Fi Protected Setup (WPS)
CONFIG_WPS=y

# EAP-IKEv2
#CONFIG_EAP_IKEV2=y

# PKCS#12 (PFX) support (used to read private key and certificate file from
# a file that usually has extension .p12 or .pfx)
CONFIG_PKCS12=y

# Smartcard support (i.e., private key on a smartcard), e.g., with openssl
# engine.
CONFIG_SMARTCARD=y

# PC/SC interface for smartcards (USIM, GSM SIM)
# Enable this if EAP-SIM or EAP-AKA is included
#CONFIG_PCSC=y

# Development testing
#CONFIG_EAPOL_TEST=y

# Select control interface backend for external programs, e.g, wpa_cli:
# unix = UNIX domain sockets (default for Linux/*BSD)
# udp = UDP sockets using localhost (127.0.0.1)
# named_pipe = Windows Named Pipe (default for Windows)
# y = use default (backwards compatibility)
# If this option is commented out, control interface is not included in the
# build.
CONFIG_CTRL_IFACE=y

# Include support for GNU Readline and History Libraries in wpa_cli.
# When building a wpa_cli binary for distribution, please note that these
# libraries are licensed under GPL and as such, BSD license may not apply for
# the resulting binary.
#CONFIG_READLINE=y

# Remove debugging code that is printing out debug message to stdout.
# This can be used to reduce the size of the wpa_supplicant considerably
# if debugging code is not needed. The size reduction can be around 35%
# (e.g., 90 kB).
#CONFIG_NO_STDOUT_DEBUG=y

# Remove WPA support, e.g., for wired-only IEEE 802.1X supplicant, to save
# 35-50 kB in code size.
#CONFIG_NO_WPA=y

# Remove WPA2 support. This allows WPA to be used, but removes WPA2 code to
# save about 1 kB in code size when building only WPA-Personal (no EAP support)
# or 6 kB if building for WPA-Enterprise.
#CONFIG_NO_WPA2=y

# Remove IEEE 802.11i/WPA-Personal ASCII passphrase support
# This option can be used to reduce code size by removing support for
# converting ASCII passphrases into PSK. If this functionality is removed, the
# PSK can only be configured as the 64-octet hexstring (e.g., from
# wpa_passphrase). This saves about 0.5 kB in code size.
#CONFIG_NO_WPA_PASSPHRASE=y

# Disable scan result processing (ap_mode=1) to save code size by about 1 kB.
# This can be used if ap_scan=1 mode is never enabled.
#CONFIG_NO_SCAN_PROCESSING=y

# Select configuration backend:
# file = text file (e.g., wpa_supplicant.conf; note: the configuration file
#	path is given on command line, not here; this option is just used to
#	select the backend that allows configuration files to be used)
# winreg = Windows registry (see win_example.reg for an example)
CONFIG_BACKEND=file

# Remove configuration write functionality (i.e., to allow the configuration
# file to be updated based on runtime configuration changes). The runtime
# configuration can still be changed, the changes are just not going to be
# persistent over restarts. This option can be used to reduce code size by
# about 3.5 kB.
#CONFIG_NO_CONFIG_WRITE=y

# Remove support for configuration blobs to reduce code size by about 1.5 kB.
#CONFIG_NO_CONFIG_BLOBS=y

# Select program entry point implementation:
# main = UNIX/POSIX like main() function (default)
# main_winsvc = Windows service (read parameters from registry)
# main_none = Very basic example (development use only)
#CONFIG_MAIN=main

# Select wrapper for operatins system and C library specific functions
# unix = UNIX/POSIX like systems (default)
# win32 = Windows systems
# none = Empty template
#CONFIG_OS=unix

# Select event loop implementation
# eloop = select() loop (default)
# eloop_win = Windows events and WaitForMultipleObject() loop
# eloop_none = Empty template
#CONFIG_ELOOP=eloop

# Select layer 2 packet implementation
# linux = Linux packet socket (default)
# pcap = libpcap/libdnet/WinPcap
# freebsd = FreeBSD libpcap
# winpcap = WinPcap with receive thread
# ndis = Windows NDISUIO (note: requires CONFIG_USE_NDISUIO=y)
# none = Empty template
#CONFIG_L2_PACKET=linux

# PeerKey handshake for Station to Station Link (IEEE 802.11e DLS)
CONFIG_PEERKEY=y

# IEEE 802.11w (management frame protection)
# This version is an experimental implementation based on IEEE 802.11w/D1.0
# draft and is subject to change since the standard has not yet been finalized.
# Driver support is also needed for IEEE 802.11w.
CONFIG_IEEE80211W=y

# Select TLS implementation
# openssl = OpenSSL (default)
# gnutls = GnuTLS (needed for TLS/IA, see also CONFIG_GNUTLS_EXTRA)
# internal = Internal TLSv1 implementation (experimental)
# none = Empty template
CONFIG_TLS=internal

# Whether to enable TLS/IA support, which is required for EAP-TTLSv1.
# You need CONFIG_TLS=gnutls for this to have any effect. Please note that
# even though the core GnuTLS library is released under LGPL, this extra
# library uses GPL and as such, the terms of GPL apply to the combination
# of wpa_supplicant and GnuTLS if this option is enabled. BSD license may not
# apply for distribution of the resulting binary.
#CONFIG_GNUTLS_EXTRA=y

# If CONFIG_TLS=internal is used, additional library and include paths are
# needed for LibTomMath. Alternatively, an integrated, minimal version of
# LibTomMath can be used. See beginning of libtommath.c for details on benefits
# and drawbacks of this option.
CONFIG_INTERNAL_LIBTOMMATH=y
#ifndef CONFIG_INTERNAL_LIBTOMMATH
#LTM_PATH=/usr/src/libtommath-0.39
#CFLAGS += -I$(LTM_PATH)
#LIBS += -L$(LTM_PATH)
#LIBS_p += -L$(LTM_PATH)
#endif
# At the cost of about 4 kB of additional binary size, the internal LibTomMath
# can be configured to include faster routines for exptmod, sqr, and div to
# speed up DH and RSA calculation considerably
CONFIG_INTERNAL_LIBTOMMATH_FAST=y

# Include NDIS event processing through WMI into wpa_supplicant/wpasvc.
# This is only for Windows builds and requires WMI-related header files and
# WbemUuid.Lib from Platform SDK even when building with MinGW.
#CONFIG_NDIS_EVENTS_INTEGRATED=y
#PLATFORMSDKLIB="/opt/Program Files/Microsoft Platform SDK/Lib"

# Add support for old DBus control interface
# (fi.epitest.hostap.WPASupplicant)
#CONFIG_CTRL_IFACE_DBUS=y

# Add support for new DBus control interface
# (fi.w1.hostap.wpa_supplicant1)
#CONFIG_CTRL_IFACE_DBUS_NEW=y

# Add introspection support for new DBus control interface
#CONFIG_CTRL_IFACE_DBUS_INTRO=y

# Add support for loading EAP methods dynamically as shared libraries.
# When this option is enabled, each EAP method can be either included
# statically (CONFIG_EAP_<method>=y) or dynamically (CONFIG_EAP_<method>=dyn).
# Dynamic EAP methods are build as shared objects (eap_*.so) and they need to
# be loaded in the beginning of the wpa_supplicant configuration file
# (see load_dynamic_eap parameter in the example file) before being used in
# the network blocks.
#
# Note that some shared parts of EAP methods are included in the main program
# and in order to be able to use dynamic EAP methods using these parts, the
# main program must have been build with the EAP method enabled (=y or =dyn).
# This means that EAP-TLS/PEAP/TTLS/FAST cannot be added as dynamic libraries
# unless at least one of them was included in the main build to force inclusion
# of the shared code. Similarly, at least one of EAP-SIM/AKA must be included
# in the main build to be able to load these methods dynamically.
#
# Please also note that using dynamic libraries will increase the total binary
# size. Thus, it may not be the best option for targets that have limited
# amount of memory/flash.
#CONFIG_DYNAMIC_EAP_METHODS=y

# IEEE Std 802.11r-2008 (Fast BSS Transition)
#CONFIG_IEEE80211R=y

# Add support for writing debug log to a file (/tmp/wpa_supplicant-log-#.txt)
#CONFIG_DEBUG_FILE=y

# Enable privilege separation (see README 'Privilege separation' for details)
#CONFIG_PRIVSEP=y

# Enable mitigation against certain attacks against TKIP by delaying Michael
# MIC error reports by a random amount of time between 0 and 60 seconds
#CONFIG_DELAYED_MIC_ERROR_REPORT=y

# Enable tracing code for developer debugging
# This tracks use of memory allocations and other registrations and reports
# incorrect use with a backtrace of call (or allocation) location.
#CONFIG_WPA_TRACE=y
# For BSD, comment out these.
#LIBS += -lexecinfo
#LIBS_p += -lexecinfo
#LIBS_c += -lexecinfo

# Use libbfd to get more details for developer debugging
# This enables use of libbfd to get more detailed symbols for the backtraces
# generated by CONFIG_WPA_TRACE=y.
#CONFIG_WPA_TRACE_BFD=y
# For BSD, comment out these.
#LIBS += -lbfd -liberty -lz
#LIBS_p += -lbfd -liberty -lz
#LIBS_c += -lbfd -liberty -lz

CONFIG_NO_RANDOM_POOL=y
NEED_80211_COMMON=y

CONFIG_IBSS_RSN=y

CONFIG_MESH=y
CONFIG_SAE=y
CONFIG_AP=y
# Example wpa_supplicant build time configuration
#
# This file lists the configuration options that are used when building the
# hostapd binary. All lines starting with # are ignored. Configuration option
# lines must be commented out complete, if they are not to be included, i.e.,
# just setting VARIABLE=n is not disabling that variable.
#
# This file is included in Makefile, so variables like CFLAGS and LIBS can also
# be modified from here. In most cases, these lines should use += in order not
# to override previous values of the variables.


# Uncomment following two lines and fix the paths if you have installed OpenSSL
# or GnuTLS in non-default location
#CFLAGS += -I/usr/local/openssl/include
#LIBS += -L/usr/local/openssl/lib

# Some Red Hat versions seem to include kerberos header files from OpenSSL, but
# the kerberos files are not in the default include path. Following line can be
# used to fix build issues on such systems (krb5.h not found).
#CFLAGS += -I/usr/include/kerberos

# Example configuration for various cross-compilation platforms

#### sveasoft (e.g., for Linksys WRT54G) ######################################
#CC=mipsel-uclibc-gcc
#CC=/opt/brcm/hndtools-mipsel-uclibc/bin/mipsel-uclibc-gcc
#CFLAGS += -Os
#CPPFLAGS += -I../src/include -I../../src/router/openssl/include
#LIBS += -L/opt/brcm/hndtools-mipsel-uclibc-0.9.19/lib -lssl
###############################################################################

#### openwrt (e.g., for Linksys WRT54G) #######################################
#CC=mipsel-uclibc-gcc
#CC=/opt/brcm/hndtools-mipsel-uclibc/bin/mipsel-uclibc-gcc
#CFLAGS += -Os
#CPPFLAGS=-I../src/include -I../openssl-0.9.7d/include \
#	-I../WRT54GS/release/src/include
#LIBS = -lssl
###############################################################################


# Driver interface for Host AP driver
CONFIG_DRIVER_HOSTAP=y

# Driver interface for Agere driver
#CONFIG_DRIVER_HERMES=y
# Change include directories to match with the local setup
#CFLAGS += -I../../hcf -I../../include -I../../include/hcf
#CFLAGS += -I../../include/wireless

# Driver interface for ndiswrapper
# Deprecated; use CONFIG_DRIVER_WEXT=y instead.
#CONFIG_DRIVER_NDISWRAPPER=y

# Driver interface for Atmel driver
# CONFIG_DRIVER_ATMEL=y

# Driver interface for old Broadcom driver
# Please note that the newer Broadcom driver ("hybrid Linux driver") supports
# Linux wireless extensions and does not need (or even work) with the old
# driver wrapper. Use CONFIG_DRIVER_WEXT=y with that driver.
#CONFIG_DRIVER_BROADCOM=y
# Example path for wlioctl.h; change to match your configuration
#CFLAGS += -I/opt/WRT54GS/release/src/include

# Driver interface for Intel ipw2100/2200 driver
# Deprecated; use CONFIG_DRIVER_WEXT=y instead.
#CONFIG_DRIVER_IPW=y

# Driver interface for Ralink driver
#CONFIG_DRIVER_RALINK=y

# Driver interface for generic Linux wireless extensions
CONFIG_DRIVER_WEXT=y

# Driver interface for Linux drivers using the nl80211 kernel interface
CONFIG_DRIVER_NL80211=y

# Driver interface for FreeBSD net80211 layer (e.g., Atheros driver)
#CONFIG_DRIVER_BSD=y
#CFLAGS += -I/usr/local/include
#LIBS += -L/usr/local/lib
#LIBS_p += -L/usr/local/lib
#LIBS_c += -L/usr/local/lib

# Driver interface for Windows NDIS
#CONFIG_DRIVER_NDIS=y
#CFLAGS += -I/usr/include/w32api/ddk
#LIBS += -L/usr/local/lib
# For native build using mingw
#CONFIG_NATIVE_WINDOWS=y
# Additional directories for cross-compilation on Linux host for mingw target
#CFLAGS += -I/opt/mingw/mingw32/include/ddk
#LIBS += -L/opt/mingw/mingw32/lib
#CC=mingw32-gcc
# By default, driver_ndis uses WinPcap for low-level operations. This can be
# replaced with the following option which replaces WinPcap calls with NDISUIO.
# However, this requires that WZC is disabled (net stop wzcsvc) before starting
# wpa_supplicant.
# CONFIG_USE_NDISUIO=y

# Driver interface for development testing
#CONFIG_DRIVER_TEST=y

# Include client MLME (management frame processing) for test driver
# This can be used to test MLME operations in hostapd with the test interface.
# space.
#CONFIG_CLIENT_MLME=y

# Driver interface for wired Ethernet drivers
CONFIG_DRIVER_WIRED=y

# Driver interface for the Broadcom RoboSwitch family
#CONFIG_DRIVER_ROBOSWITCH=y

# Driver interface for no driver (e.g., WPS ER only)
#CONFIG_DRIVER_NONE=y

# Enable IEEE 802.1X Supplicant (automatically included if any EAP method is
# included)
# CONFIG_IEEE8021X_EAPOL=y

# EAP-MD5
# CONFIG_EAP_MD5=y

# EAP-MSCHAPv2
# CONFIG_EAP_MSCHAPV2=y

# EAP-TLS
# CONFIG_EAP_TLS=y

# EAL-PEAP
# CONFIG_EAP_PEAP=y

# EAP-TTLS
# CONFIG_EAP_TTLS=y

# EAP-FAST
# Note: Default OpenSSL package does not include support for all the
# functionality needed for EAP-FAST. If EAP-FAST is enabled with OpenSSL,
# the OpenSSL library must be patched (openssl-0.9.8d-tls-extensions.patch)
# to add the needed functions.
#CONFIG_EAP_FAST=y

# EAP-GTC
# CONFIG_EAP_GTC=y

# EAP-OTP
# CONFIG_EAP_OTP=y

# EAP-SIM (enable CONFIG_PCSC, if EAP-SIM is used)
#CONFIG_EAP_SIM=y

# EAP-PSK (experimental; this is _not_ needed for WPA-PSK)
#CONFIG_EAP_PSK=y

# EAP-PAX
#CONFIG_EAP_PAX=y

# LEAP
# CONFIG_EAP_LEAP=y

# EAP-AKA (enable CONFIG_PCSC, if EAP-AKA is used)
#CONFIG_EAP_AKA=y

# EAP-AKA' (enable CONFIG_PCSC, if EAP-AKA' is used).
# This requires CONFIG_EAP_AKA to be enabled, too.
#CONFIG_EAP_AKA_PRIME=y

# Enable USIM simulator (Milenage) for EAP-AKA
#CONFIG_USIM_SIMULATOR=y

# EAP-SAKE
#CONFIG_EAP_SAKE=y

# EAP-GPSK
#CONFIG_EAP_GPSK=y
# Include support for optional SHA256 cipher suite in EAP-GPSK
#CONFIG_EAP_GPSK_SHA256=y

# EAP-TNC and related Trusted Network Connect support (experimental)
#CONFIG_EAP_TNC=y

# Wi-Fi Protected Setup (WPS)
#CONFIG_WPS=y

# EAP-IKEv2
#CONFIG_EAP_IKEV2=y

# PKCS#12 (PFX) support (used to read private key and certificate file from
# a file that usually has extension .p12 or .pfx)
# CONFIG_PKCS12=y

# Smartcard support (i.e., private key on a smartcard), e.g., with openssl
# engine.
# CONFIG_SMARTCARD=y

# PC/SC interface for smartcards (USIM, GSM SIM)
# Enable this if EAP-SIM or EAP-AKA is included
#CONFIG_PCSC=y

# Development testing
#CONFIG_EAPOL_TEST=y

# Select control interface backend for external programs, e.g, wpa_cli:
# unix = UNIX domain sockets (default for Linux/*BSD)
# udp = UDP sockets using localhost (127.0.0.1)
# named_pipe = Windows Named Pipe (default for Windows)
# y = use default (backwards compatibility)
# If this option is commented out, control interface is not included in the
# build.
CONFIG_CTRL_IFACE=y

# Include support for GNU Readline and History Libraries in wpa_cli.
# When building a wpa_cli binary for distribution, please note that these
# libraries are licensed under GPL and as such, BSD license may not apply for
# the resulting binary.
#CONFIG_READLINE=y

# Remove debugging code that is printing out debug message to stdout.
# This can be used to reduce the size of the wpa_supplicant considerably
# if debugging code is not needed. The size reduction can be around 35%
# (e.g., 90 kB).
#CONFIG_NO_STDOUT_DEBUG=y

# Remove WPA support, e.g., for wired-only IEEE 802.1X supplicant, to save
# 35-50 kB in code size.
#CONFIG_NO_WPA=y

# Remove WPA2 support. This allows WPA to be used, but removes WPA2 code to
# save about 1 kB in code size when building only WPA-Personal (no EAP support)
# or 6 kB if building for WPA-Enterprise.
#CONFIG_NO_WPA2=y

# Remove IEEE 802.11i/WPA-Personal ASCII passphrase support
# This option can be used to reduce code size by removing support for
# converting ASCII passphrases into PSK. If this functionality is removed, the
# PSK can only be configured as the 64-octet hexstring (e.g., from
# wpa_passphrase). This saves about 0.5 kB in code size.
#CONFIG_NO_WPA_PASSPHRASE=y

# Disable scan result processing (ap_mode=1) to save code size by about 1 kB.
# This can be used if ap_scan=1 mode is never enabled.
#CONFIG_NO_SCAN_PROCESSING=y

# Select configuration backend:
# file = text file (e.g., wpa_supplicant.conf; note: the configuration file
#	path is given on command line, not here; this option is just used to
#	select the backend that allows configuration files to be used)
# winreg = Windows registry (see win_example.reg for an example)
CONFIG_BACKEND=file

# Remove configuration write functionality (i.e., to allow the configuration
# file to be updated based on runtime configuration changes). The runtime
# configuration can still be changed, the changes are just not going to be
# persistent over restarts. This option can be used to reduce code size by
# about 3.5 kB.
#CONFIG_NO_CONFIG_WRITE=y

# Remove support for configuration blobs to reduce code size by about 1.5 kB.
#CONFIG_NO_CONFIG_BLOBS=y

# Select program entry point implementation:
# main = UNIX/POSIX like main() function (default)
# main_winsvc = Windows service (read parameters from registry)
# main_none = Very basic example (development use only)
#CONFIG_MAIN=main

# Select wrapper for operatins system and C library specific functions
# unix = UNIX/POSIX like systems (default)
# win32 = Windows systems
# none = Empty template
#CONFIG_OS=unix

# Select event loop implementation
# eloop = select() loop (default)
# eloop_win = Windows events and WaitForMultipleObject() loop
# eloop_none = Empty template
#CONFIG_ELOOP=eloop

# Select layer 2 packet implementation
# linux = Linux packet socket (default)
# pcap = libpcap/libdnet/WinPcap
# freebsd = FreeBSD libpcap
# winpcap = WinPcap with receive thread
# ndis = Windows NDISUIO (note: requires CONFIG_USE_NDISUIO=y)
# none = Empty template
#CONFIG_L2_PACKET=linux

# PeerKey handshake for Station to Station Link (IEEE 802.11e DLS)
# CONFIG_PEERKEY=y

# IEEE 802.11w (management frame protection)
# This version is an experimental implementation based on IEEE 802.11w/D1.0
# draft and is subject to change since the standard has not yet been finalized.
# Driver support is also needed for IEEE 802.11w.
#CONFIG_IEEE80211W=y

# Select TLS implementation
# openssl = OpenSSL (default)
# gnutls = GnuTLS (needed for TLS/IA, see also CONFIG_GNUTLS_EXTRA)
# internal = Internal TLSv1 implementation (experimental)
# none = Empty template
CONFIG_TLS=internal

# Whether to enable TLS/IA support, which is required for EAP-TTLSv1.
# You need CONFIG_TLS=gnutls for this to have any effect. Please note that
# even though the core GnuTLS library is released under LGPL, this extra
# library uses GPL and as such, the terms of GPL apply to the combination
# of wpa_supplicant and GnuTLS if this option is enabled. BSD license may not
# apply for distribution of the resulting binary.
#CONFIG_GNUTLS_EXTRA=y

# If CONFIG_TLS=internal is used, additional library and include paths are
# needed for LibTomMath. Alternatively, an integrated, minimal version of
# LibTomMath can be used. See beginning of libtommath.c for details on benefits
# and drawbacks of this option.
#CONFIG_INTERNAL_LIBTOMMATH=y
#ifndef CONFIG_INTERNAL_LIBTOMMATH
#LTM_PATH=/usr/src/libtommath-0.39
#CFLAGS += -I$(LTM_PATH)
#LIBS += -L$(LTM_PATH)
#LIBS_p += -L$(LTM_PATH)
#endif
# At the cost of about 4 kB of additional binary size, the internal LibTomMath
# can be configured to include faster routines for exptmod, sqr, and div to
# speed up DH and RSA calculation considerably
#CONFIG_INTERNAL_LIBTOMMATH_FAST=y

# Include NDIS event processing through WMI into wpa_supplicant/wpasvc.
# This is only for Windows builds and requires WMI-related header files and
# WbemUuid.Lib from Platform SDK even when building with MinGW.
#CONFIG_NDIS_EVENTS_INTEGRATED=y
#PLATFORMSDKLIB="/opt/Program Files/Microsoft Platform SDK/Lib"

# Add support for old DBus control interface
# (fi.epitest.hostap.WPASupplicant)
#CONFIG_CTRL_IFACE_DBUS=y

# Add support for new DBus control interface
# (fi.w1.hostap.wpa_supplicant1)
#CONFIG_CTRL_IFACE_DBUS_NEW=y

# Add introspection support for new DBus control interface
#CONFIG_CTRL_IFACE_DBUS_INTRO=y

# Add support for loading EAP methods dynamically as shared libraries.
# When this option is enabled, each EAP method can be either included
# statically (CONFIG_EAP_<method>=y) or dynamically (CONFIG_EAP_<method>=dyn).
# Dynamic EAP methods are build as shared objects (eap_*.so) and they need to
# be loaded in the beginning of the wpa_supplicant configuration file
# (see load_dynamic_eap parameter in the example file) before being used in
# the network blocks.
#
# Note that some shared parts of EAP methods are included in the main program
# and in order to be able to use dynamic EAP methods using these parts, the
# main program must have been build with the EAP method enabled (=y or =dyn).
# This means that EAP-TLS/PEAP/TTLS/FAST cannot be added as dynamic libraries
# unless at least one of them was included in the main build to force inclusion
# of the shared code. Similarly, at least one of EAP-SIM/AKA must be included
# in the main build to be able to load these methods dynamically.
#
# Please also note that using dynamic libraries will increase the total binary
# size. Thus, it may not be the best option for targets that have limited
# amount of memory/flash.
#CONFIG_DYNAMIC_EAP_METHODS=y

# IEEE Std 802.11r-2008 (Fast BSS Transition)
#CONFIG_IEEE80211R=y

# Add support for writing debug log to a file (/tmp/wpa_supplicant-log-#.txt)
#CONFIG_DEBUG_FILE=y

# Enable privilege separation (see README 'Privilege separation' for details)
#CONFIG_PRIVSEP=y

# Enable mitigation against certain attacks against TKIP by delaying Michael
# MIC error reports by a random amount of time between 0 and 60 seconds
#CONFIG_DELAYED_MIC_ERROR_REPORT=y

# Enable tracing code for developer debugging
# This tracks use of memory allocations and other registrations and reports
# incorrect use with a backtrace of call (or allocation) location.
#CONFIG_WPA_TRACE=y
# For BSD, comment out these.
#LIBS += -lexecinfo
#LIBS_p += -lexecinfo
#LIBS_c += -lexecinfo

# Use libbfd to get more details for developer debugging
# This enables use of libbfd to get more detailed symbols for the backtraces
# generated by CONFIG_WPA_TRACE=y.
#CONFIG_WPA_TRACE_BFD=y
# For BSD, comment out these.
#LIBS += -lbfd -liberty -lz
#LIBS_p += -lbfd -liberty -lz
#LIBS_c += -lbfd -liberty -lz

CONFIG_NO_RANDOM_POOL=y
NEED_80211_COMMON=y
config 'settings' 'p2pblock'
	option 'portrange' '1024:65535'
	option 'layer7' 'edonkey bittorrent fasttrack'
	option 'ipp2p' 'edk dc kazaa gnu bit ares soul winmx apple'
	option 'blocktime' '60'
	option 'whitelist' ''
  config process
	option process 'dropbear'
	option initscript '/etc/init.d/dropbear'

config process
	option process 'crond'
	option initscript '/etc/init.d/cron'
